///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Свойство("АдресСтруктурыХраненияБазы", АдресСтруктурыХраненияБазы);
	Параметры.Свойство("КоличествоОтображаемыхРеквизитов", КоличествоОтображаемыхРеквизитов);
	Параметры.Свойство("ОтображатьСтруктуруСУБД", ОтображатьСтруктуруСУБД);
	Параметры.Свойство("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
	Параметры.Свойство("ОтображатьСиноним", ОтображатьСиноним);
	Параметры.Свойство("ГруппаМетаданных", ГруппаМетаданных);
	Параметры.Свойство("ИмяОбъекта", ИмяОбъекта);
	Параметры.Свойство("ПрефиксЗапроса", ПрефиксЗапроса);
	Параметры.Свойство("ТекущийОбъект", ТекущийОбъект);
	Параметры.Свойство("НачальнаяТаблица", НачальнаяТаблица);
	Параметры.Свойство("ВыбранныйРежимЗаписиДокумента", ВыбранныйРежимЗаписиДокумента);
	Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);

	Если Параметры.Свойство("ДополнительныеСвойства") Тогда
		// BSLLS:UsingServiceTag-off
		//@skip-check unknown-form-parameter-access
		// BSLLS:UsingServiceTag-on
		Для Каждого СтрокаСвойств Из Параметры.ДополнительныеСвойства Цикл
			НовоеСвойство = ДополнительныеСвойства.Добавить();
			НовоеСвойство.Ключ = СтрокаСвойств.Ключ;
			НовоеСвойство.Значение = СтрокаСвойств.Значение;
			НовоеСвойство.Пометка = СтрокаСвойств.Пометка;
		КонецЦикла;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущийОбъект) И Не ГруппаМетаданных = "РегистрыСведений" Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ЗаполнитьПиктограммыМетаданных();

	Если (Не ЗначениеЗаполнено(ИмяОбъекта)
		Или Не ЗначениеЗаполнено(ПрефиксЗапроса))
		И ЗначениеЗаполнено(ТекущийОбъект) Тогда

		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		СтруктураПараметров = ОбработкаОбъект.ПолучитьСтруктуруПараметров(ТекущийОбъект);
		ИмяОбъекта = СтруктураПараметров.ИмяОбъекта;
		ПрефиксЗапроса = СтруктураПараметров.ПрефиксЗапроса;
		ГруппаМетаданных = СтруктураПараметров.ГруппаМетаданных;
	КонецЕсли;

	УстановитьЗаголовокФормы();

	// BSLLS:UnusedLocalVariable-off
	ИспользоватьСтандартнуюФормуВыбора = Истина;
	// BSLLS:UnusedLocalVariable-on

	УстановитьУсловноеОформление();

	// BSLLS:UnusedLocalVariable-off
	ПроверятьМодифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

	ЗаполнитьДанныеОбъекта();

	Элементы.СтраницаСвойств.Картинка = БиблиотекаКартинок.Реквизит;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ЗаписатьОперациюБизнесСтатистики("ОткрытиеФормыРедактора");
	ЗаполнитьЗаголовкиСтраниц();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	Если ПроверятьМодифицированность Тогда
		Если Модифицированность Тогда
			ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("Подключаемый_ЗакрытьФорму", ЭтотОбъект);

			ПоказатьВопрос(
				ОповещениеЗакрытиеФормы,
				НСтр("ru = 'Внесенные изменения будут потеряны. Закрыть форму?'"),
				РежимДиалогаВопрос.ДаНет);

			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если СтрНайти(ИсточникВыбора.ИмяФормы, "РедакторДанных.Форма.НастройкаВидимостиТаблиц") > 0 Тогда
			Для Каждого ЭлементСоответствие Из ВыбранноеЗначение Цикл
				СтрокаСоответствия = СоответствиеТаблицИСтраниц.НайтиПоЗначению(ЭлементСоответствие.Значение);
				СтрокаСоответствия.Пометка = ЭлементСоответствие.Пометка;
				Элементы[СтрокаСоответствия.Представление].Видимость = СтрокаСоответствия.Пометка;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "РедакторДанных_ИзменениеНастроек" Тогда
		Если Параметр = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ПослеИзмененияНастроек(Параметр);
	КонецЕсли;

	Если ИмяСобытия = "РедакторДанных_СтруктураХраненияСУБДИнициализирована" Тогда
		Если Параметр = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если ПустаяСтрока(АдресСтруктурыХраненияБазы) Тогда
			// BSLLS:UnusedLocalVariable-off
			АдресСтруктурыХраненияБазы = Параметр;
			ОтображатьСтруктуруСУБД = Истина;
			// BSLLS:UnusedLocalVariable-on

			ПараметрыОбновления = Новый Структура();
			ПараметрыОбновления.Вставить("УдалитьЭлементыФормы", Истина);

			ОповещениеОбновитьВкладку = Новый ОписаниеОповещения(
				"Подключаемый_ОбновитьВкладку",
				ЭтотОбъект,
				ПараметрыОбновления);

			ПроверитьОбъектМодифицирован(ОповещениеОбновитьВкладку);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Оповестить("РедакторДанных_ЗакрытиеФормыОбъекта", , ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвойстваОбъекта

&НаКлиенте
Процедура СвойстваОбъектаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	НачалоВыбораРеквизитаИзСписка(Элемент, "Значение", "СвойстваОбъекта", СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СвойстваОбъектаПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	ИмяСвойства = ТекущиеДанные.Имя;

	Если ИсключаемоеСвойство(ИмяСвойства, СвойстваОбъекта, ГруппаМетаданных) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Элемент.ТекущийЭлемент.Имя = "СвойстваОбъектаЗначение" Тогда
		Элемент.ТекущийЭлемент.ОграничениеТипа = ТекущиеДанные.ОписаниеТипов;
	КонецЕсли;

	Если Не Отказ Тогда
		ОбработатьИзменениеХранилищаЗначения(
			ТекущиеДанные,
			Элемент.Имя,
			"Значение",
			ТекущиеДанные.ПолучитьИдентификатор(),
			Отказ);
	КонецЕсли;

	Если Не Отказ Тогда
		ОбработатьИзменениеУникальногоИдентификатора(
			ТекущиеДанные.Значение,
			Элемент.Имя,
			"Значение",
			ТекущиеДанные.ПолучитьИдентификатор(),
			Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвойстваОбъектаПриАктивизацииЯчейки(Элемент)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.СвойстваОбъектаЗначениеКонтекстноеМенюОткрытьВРедакторе.Видимость =
		(Элемент.ТекущийЭлемент.Имя = "СвойстваОбъектаЗначение") И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланыОбменаОбъекта

&НаКлиенте
Процедура ПланыОбменаОбъектаПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Узел) Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.ТекущийЭлемент = Элементы.ПланыОбменаОбъектаЗарегистрирован Тогда
		Если Элемент.ТекущиеДанные.Зарегистрирован Тогда
			ИзменитьРегистрациюНаУзле(Элемент.ТекущиеДанные.Узел, ТекущийОбъект, Ложь, ГруппаМетаданных);
			Элемент.ТекущиеДанные.Зарегистрирован = Ложь;
			Элемент.ТекущиеДанные.НомерОтправленного = 0;

		Иначе
			ИзменитьРегистрациюНаУзле(Элемент.ТекущиеДанные.Узел, ТекущийОбъект, Истина, ГруппаМетаданных);
			Элемент.ТекущиеДанные.Зарегистрирован = Истина;
		КонецЕсли;

	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ПланыОбменаОбъектаНомерОтправленного Тогда
		ДанныеДляРегистрации = Новый Структура();
		ДанныеДляРегистрации.Вставить("Узел", Элемент.ТекущиеДанные.Узел);
		ДанныеДляРегистрации.Вставить("Объект", ТекущийОбъект);
		ДанныеДляРегистрации.Вставить("ИдентификаторСтроки", Элемент.ТекущиеДанные.ПолучитьИдентификатор());

		Оповещение = Новый ОписаниеОповещения(
			"РедактироватьНомерСообщенияЗавершение",
			ЭтотОбъект,
			ДанныеДляРегистрации);

		Подсказка = НСтр("ru = 'Номер отправленного'");
		ПоказатьВводЧисла(Оповещение, Элемент.ТекущиеДанные.НомерОтправленного, Подсказка);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДинамическая

&НаКлиенте
Процедура Подключаемый_ДинамическаяТаблицаПриИзменении(Элемент)

	ОбновитьКолонкуНомерСтроки(Элемент.Имя);

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

	УстановитьВидимостьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДинамическаяТаблицаПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяКолонки = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "");

	Если ИсключаемоеСвойство(ИмяКолонки, СвойстваОбъекта, ГруппаМетаданных) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Не Отказ Тогда
		ОбработатьИзменениеХранилищаЗначения(
			ТекущиеДанные,
			Элемент.Имя,
			ИмяКолонки,
			ТекущиеДанные.ПолучитьИдентификатор(),
			Отказ);
	КонецЕсли;

	Если Не Отказ Тогда
		ОбработатьИзменениеУникальногоИдентификатора(
			ТекущиеДанные[ИмяКолонки],
			Элемент.Имя,
			ИмяКолонки,
			ТекущиеДанные.ПолучитьИдентификатор(),
			Отказ);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьОбъект(Команда)

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("УдалитьЭлементыФормы", Истина);

	ОповещениеОбновитьВкладку = Новый ОписаниеОповещения(
		"Подключаемый_ОбновитьВкладку",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ПроверитьОбъектМодифицирован(ОповещениеОбновитьВкладку);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбъект(Команда)

	Если Не ЗначениеЗаполнено(ТекущийОбъект) И Не ГруппаМетаданных = "РегистрыСведений" Тогда
		Возврат;
	КонецЕсли;

	ОповещениеСохранитьОбъект = Новый ОписаниеОповещения("Подключаемый_СохранитьОбъект", ЭтотОбъект);

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
	ПараметрыФормы.Вставить("ВыбранныйРежимЗаписиДокумента", ВыбранныйРежимЗаписиДокумента);
	ПараметрыФормы.Вставить("ДополнительныеСвойства", УпаковатьДополнительныеСвойства());
	ПараметрыФормы.Вставить("ЭтоДокумент", ГруппаМетаданных = "Документы");

	ОткрытьФормуРедактора("ДиалогСохраненияОбъекта", ПараметрыФормы, ЭтотОбъект, , ОповещениеСохранитьОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВыделенные(Команда)

	ИзменитьРегистрациюВыделенныхСтрок(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенные(Команда)

	ИзменитьРегистрациюВыделенныхСтрок(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапроса(Команда)

	Если Не ЗначениеЗаполнено(ТекущийОбъект) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать объект'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ГруппаМетаданных", ГруппаМетаданных);
	ПараметрыФормы.Вставить("ПрефиксЗапроса", ПрефиксЗапроса);
	ПараметрыФормы.Вставить("ИмяОбъекта", ИмяОбъекта);
	ПараметрыФормы.Вставить("ТекущийОбъект", ТекущийОбъект);
	ПараметрыФормы.Вставить("АдресСтруктурыХраненияБазы", АдресСтруктурыХраненияБазы);

	ОткрытьФормуРедактора("ГенераторТекстаЗапроса", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВРедакторе(Команда)

	ТекущиеДанные = Элементы.СвойстваОбъекта.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоСсылочныйТип(ТекущиеДанные.Значение) Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("АдресСтруктурыХраненияБазы", АдресСтруктурыХраненияБазы);
		ПараметрыФормы.Вставить("ОтображатьСтруктуруСУБД", ОтображатьСтруктуруСУБД);
		ПараметрыФормы.Вставить("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
		ПараметрыФормы.Вставить("ОтображатьСиноним", ОтображатьСиноним);
		ПараметрыФормы.Вставить("ГруппаМетаданных", Неопределено);
		ПараметрыФормы.Вставить("ИмяОбъекта", Неопределено);
		ПараметрыФормы.Вставить("ПрефиксЗапроса", Неопределено);
		ПараметрыФормы.Вставить("ТекущийОбъект", ТекущиеДанные.Значение);

		ОткрытьФормуРедактора("РедакторОбъекта", ПараметрыФормы, ЭтотОбъект, ТекущиеДанные.Значение);

	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Тип не поддерживается'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидимостьТаблиц(Команда)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	ПараметрыФормы.Вставить("ДобавленныеРегистрыСведений", ДобавленныеРегистрыСведений);
	ПараметрыФормы.Вставить("ДобавленныеРегистрыНакопления", ДобавленныеРегистрыНакопления);
	ПараметрыФормы.Вставить("ДобавленныеРегистрыБухгалтерии", ДобавленныеРегистрыБухгалтерии);
	ПараметрыФормы.Вставить("ДобавленныеРегистрыРасчета", ДобавленныеРегистрыРасчета);
	ПараметрыФормы.Вставить("ПланыОбменаОбъекта", ПланыОбменаОбъекта);
	ПараметрыФормы.Вставить("ОтображатьСиноним", ОтображатьСиноним);
	ПараметрыФормы.Вставить("СоответствиеТаблицИСтраниц", СоответствиеТаблицИСтраниц);

	ОткрытьФормуРедактора(
		"НастройкаВидимостиТаблиц",
		ПараметрыФормы,
		ЭтотОбъект, , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОтображатьСиноним", ОтображатьСиноним);
	ПараметрыФормы.Вставить("ОтображатьСтруктуруСУБД", ОтображатьСтруктуруСУБД);
	ПараметрыФормы.Вставить("ОткрытиеИзФормыОбъекта", Истина);

	ОткрытьФормуРедактора("НастройкиРедактора", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)

	ПровестиДокументНаСервере();

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("УдалитьЭлементыФормы", Истина);

	ОповещениеОбновитьВкладку = Новый ОписаниеОповещения(
		"Подключаемый_ОбновитьВкладку",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ВыполнитьОбработкуОповещения(ОповещениеОбновитьВкладку);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроведениеДокумента(Команда)

	ОтменитьПроведениеДокументаНаСервере();

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("УдалитьЭлементыФормы", Истина);

	ОповещениеОбновитьВкладку = Новый ОписаниеОповещения(
		"Подключаемый_ОбновитьВкладку",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ВыполнитьОбработкуОповещения(ОповещениеОбновитьВкладку);

КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеСнятьПометку(Команда)

	ПометкаУдаленияУстановлена = ПометкаУдаленияУстановлена(ТекущийОбъект);

	Если ПометкаУдаленияУстановлена Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), Строка(ТекущийОбъект));
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), Строка(ТекущийОбъект));
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ПометитьНаУдалениеСнятьПометку",
		ЭтотОбъект,
		Не ПометкаУдаленияУстановлена);

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьНепосредственно(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ПослеОтветаНаВопросОФизическомУдалении",
		ЭтотОбъект);

	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите удалить элемент непосредственно
						|без контроля ссылочной целостности базы данных?'");

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументы(Команда)

	Если Не ГруппаМетаданных = "Документы" Тогда
		Возврат;
	КонецЕсли;

	ИмяФормыСвязанныеДокументы = "СвязанныеДокументы";

	ОткрытьФорму("ОбщаяФорма." + ИмяФормыСвязанныеДокументы,
		Новый Структура("ОбъектОтбора", ТекущийОбъект),
		ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроизвольныйКод(Команда)

	Если Модифицированность Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Перед открытием панели выполнения кода необходимо сохранить внесенные изменения.'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ГруппаМетаданных", ГруппаМетаданных);
	ПараметрыФормы.Вставить("ИмяОбъекта", ИмяОбъекта);
	ПараметрыФормы.Вставить("ТекущийОбъект", ТекущийОбъект);

	ОткрытьФормуРедактора("ВыполнениеПроизвольногоКода", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// BSLLS:UnusedLocalVariable-off
		ПроверятьМодифицированность = Ложь;
		// BSLLS:UnusedLocalVariable-on
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьОбъект(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РезультатЗакрытия.Свойство("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
	РезультатЗакрытия.Свойство("ВыбранныйРежимЗаписиДокумента", ВыбранныйРежимЗаписиДокумента);

	Если РезультатЗакрытия.Свойство("ДополнительныеСвойства") Тогда
		ДополнительныеСвойства.Очистить();

		Для Каждого СтрокаСвойств Из РезультатЗакрытия.ДополнительныеСвойства Цикл
			НовоеСвойство = ДополнительныеСвойства.Добавить();
			НовоеСвойство.Ключ = СтрокаСвойств.Ключ;
			НовоеСвойство.Значение = СтрокаСвойств.Значение;
			НовоеСвойство.Пометка = СтрокаСвойств.Пометка;
		КонецЦикла;

		Оповестить("РедакторДанных_ИзменениеДополнительныхСвойств", РезультатЗакрытия.ДополнительныеСвойства);
	КонецЕсли;

	Если РезультатЗакрытия.Свойство("Сохранить") Тогда
		СохранитьОбъектНаСервере();
		ЗаполнитьЗаголовкиСтраниц();
		УстановитьВидимостьДоступность();

		Если ГруппаМетаданных <> "Константы" Тогда
			ОповеститьОбИзменении(ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИсключаемоеСвойство(ИмяСвойства, ТекущиеСвойстваОбъекта, ГруппаОбъекта)

	ИсключаемыеСвойства = Новый Массив();
	ИсключаемыеСвойства.Добавить("UUID");
	ИсключаемыеСвойства.Добавить("Навигационная ссылка");
	ИсключаемыеСвойства.Добавить("Ссылка");
	ИсключаемыеСвойства.Добавить("Предопределенный");
	ИсключаемыеСвойства.Добавить("ИмяПредопределенныхДанных");
	ИсключаемыеСвойства.Добавить("ЭтоГруппа");
	ИсключаемыеСвойства.Добавить("НомерСтроки");
	ИсключаемыеСвойства.Добавить("Регистратор");
	ИсключаемыеСвойства.Добавить("ПериодДействия");
	ИсключаемыеСвойства.Добавить("ref");

	Если ГруппаОбъекта = "ПланыОбмена" Тогда
		УсловиеПоиска = Новый Структура();
		УсловиеПоиска.Вставить("Имя", "ЭтотУзел");
		НайденныеРеквизиты = ТекущиеСвойстваОбъекта.НайтиСтроки(УсловиеПоиска);
		Если НайденныеРеквизиты.Количество() > 0
			И НайденныеРеквизиты[0].Значение = Истина Тогда
			ИсключаемыеСвойства.Добавить("НомерПринятого");
			ИсключаемыеСвойства.Добавить("НомерОтправленного");
		КонецЕсли;
	КонецЕсли;

	Если ГруппаОбъекта = "ПланыВидовХарактеристик" Тогда
		УсловиеПоиска = Новый Структура();
		УсловиеПоиска.Вставить("Имя", "ЭтоГруппа");
		НайденныеРеквизиты = ТекущиеСвойстваОбъекта.НайтиСтроки(УсловиеПоиска);
		Если НайденныеРеквизиты.Количество() > 0 И НайденныеРеквизиты[0].Значение = Истина Тогда
			ИсключаемыеСвойства.Добавить("ТипЗначения");
		КонецЕсли;
	КонецЕсли;

	Если ИсключаемыеСвойства.Найти(ИмяСвойства) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура СохранитьОбъектНаСервере()

	ТребуетсяПолноеОбновление = Ложь;

	НачатьТранзакцию();

	Попытка
		Если ГруппаМетаданных = "Константы" Тогда
			Если ПустаяСтрока(СвойстваОбъекта[0].АдресХранилища) Тогда
				НовоеЗначение = СвойстваОбъекта[0].Значение;
				Константы[ТекущийОбъект].Установить(НовоеЗначение);
			Иначе
				НовоеЗначение = ПолучитьИзВременногоХранилища(СвойстваОбъекта[0].АдресХранилища);
				Константы[ТекущийОбъект].Установить(Новый ХранилищеЗначения(НовоеЗначение));
			КонецЕсли;

		ИначеЕсли ГруппаМетаданных = "РегистрыСведений" Тогда
			МенеджерЗаписи = РегистрыСведений[ИмяОбъекта].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущийОбъект);
			МенеджерЗаписи.Удалить();

			Для Каждого СтрокаСвойства Из СвойстваОбъекта Цикл
				Если ИсключаемоеСвойство(СтрокаСвойства.Имя, СвойстваОбъекта, ГруппаМетаданных) Тогда
					Продолжить;
				КонецЕсли;

				Если ПустаяСтрока(СтрокаСвойства.АдресХранилища) Тогда
					МенеджерЗаписи[СтрокаСвойства.Имя] = СтрокаСвойства.Значение;
				Иначе
					НовоеЗначение = ПолучитьИзВременногоХранилища(СтрокаСвойства.АдресХранилища);
					МенеджерЗаписи[СтрокаСвойства.Имя] = Новый ХранилищеЗначения(НовоеЗначение);
				КонецЕсли;
			КонецЦикла;

			МенеджерЗаписи.Записать(Истина);

		Иначе
			ИзменяемыйОбъект = ТекущийОбъект.ПолучитьОбъект();
			Если ЗначениеЗаполнено(ТекущийОбъект) И ИзменяемыйОбъект = Неопределено Тогда
				ТребуетсяПолноеОбновление = Истина;

				ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
				МенеджерОбъекта = ОбработкаОбъект.ПолучитьМенеджерОбъекта(ГруппаМетаданных, ИмяОбъекта);
				Если ГруппаМетаданных = "Документы" Тогда
					ИзменяемыйОбъект = МенеджерОбъекта.СоздатьДокумент();
				Иначе
					ИзменяемыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
				КонецЕсли;
				ИзменяемыйОбъект.УстановитьСсылкуНового(ТекущийОбъект);
			КонецЕсли;

			Для Каждого СтрокаСвойства Из СвойстваОбъекта Цикл
				Если ИсключаемоеСвойство(СтрокаСвойства.Имя, СвойстваОбъекта, ГруппаМетаданных) Тогда
					Продолжить;
				КонецЕсли;

				Если ПустаяСтрока(СтрокаСвойства.АдресХранилища) Тогда
					ИзменяемыйОбъект[СтрокаСвойства.Имя] = СтрокаСвойства.Значение;
				Иначе
					НовоеЗначение = ПолучитьИзВременногоХранилища(СтрокаСвойства.АдресХранилища);
					ИзменяемыйОбъект[СтрокаСвойства.Имя] = Новый ХранилищеЗначения(НовоеЗначение);
				КонецЕсли;
			КонецЦикла;

			Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				ИзменяемыйОбъект[ТабличнаяЧасть.ИмяТаблицы].Очистить();

				Для Каждого СтрокаТаблицы Из ЭтотОбъект[ТабличнаяЧасть.Имя] Цикл
					Если ТабличнаяЧасть.Реквизиты.Количество() = 1
						И ИсключаемоеСвойство(ТабличнаяЧасть.Реквизиты[0].Значение,
							СвойстваОбъекта, ГруппаМетаданных) Тогда

						Прервать;
					КонецЕсли;

					НоваяСтрока = ИзменяемыйОбъект[ТабличнаяЧасть.ИмяТаблицы].Добавить();

					Для Каждого ТекущийРеквизит Из ТабличнаяЧасть.Реквизиты Цикл
						Если ИсключаемоеСвойство(ТекущийРеквизит.Значение, СвойстваОбъекта, ГруппаМетаданных) Тогда
							Продолжить;
						КонецЕсли;

						ДлинаСуффикса = СтрДлина("_ПредставлениеХранилища");
						Если Прав(ТекущийРеквизит.Значение, ДлинаСуффикса) = "_ПредставлениеХранилища" Тогда
							Продолжить;
						КонецЕсли;

						ДлинаСуффикса = СтрДлина("_АдресХранилища");
						Если Прав(ТекущийРеквизит.Значение, ДлинаСуффикса) = "_АдресХранилища" Тогда
							Если ПустаяСтрока(СтрокаТаблицы[ТекущийРеквизит.Значение]) Тогда
								Продолжить;
							КонецЕсли;

							ИмяРеквизита = Лев(ТекущийРеквизит.Значение,
								СтрДлина(ТекущийРеквизит.Значение) - ДлинаСуффикса);

							НовоеЗначение = ПолучитьИзВременногоХранилища(СтрокаТаблицы[ТекущийРеквизит.Значение]);
							НоваяСтрока[ИмяРеквизита] = Новый ХранилищеЗначения(НовоеЗначение);

						Иначе
							НоваяСтрока[ТекущийРеквизит.Значение] = СтрокаТаблицы[ТекущийРеквизит.Значение];
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;

			Если ЗаписьВРежимеОбмена Тогда
				ИзменяемыйОбъект.ОбменДанными.Загрузка = Истина;
			КонецЕсли;

			УстановитьДополнительныеСвойства(ИзменяемыйОбъект.ДополнительныеСвойства);

			Если ГруппаМетаданных = "Документы" Тогда
				ИзменяемыйОбъект.Записать(РежимЗаписиДокумента[ВыбранныйРежимЗаписиДокумента]);
			Иначе
				ИзменяемыйОбъект.Записать();
			КонецЕсли;
		КонецЕсли;

		СохранитьПодчиненныеРегистры();

		// BSLLS:UnusedLocalVariable-off
		Модифицированность = Ложь;
		// BSLLS:UnusedLocalVariable-on

		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();

		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'В процессе сохранения возникла ошибка:'") + Символы.ПС
			+ РеквизитФормыВЗначение("Объект").ПолучитьОписаниеВозникшейОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();

		Возврат;
	КонецПопытки;

	// BSLLS:UnusedLocalVariable-off
	ЗначениеКопирования = Неопределено;
	// BSLLS:UnusedLocalVariable-on

	Если ТребуетсяПолноеОбновление Тогда
		ОчиститьДанныеОбъекта();
		ЗаполнитьДанныеОбъекта();
	КонецЕсли;

	УстановитьЗаголовокФормы();

КонецПроцедуры

&НаСервере
Процедура СохранитьПодчиненныеРегистры()

	КлючиСтруктуры = "ИмяТаблицы, Менеджер";

	НаборыРегистров = Новый Массив();
	НаборыРегистров.Добавить(
		Новый Структура(КлючиСтруктуры, "ДобавленныеРегистрыСведений", РегистрыСведений));
	НаборыРегистров.Добавить(
		Новый Структура(КлючиСтруктуры, "ДобавленныеРегистрыНакопления", РегистрыНакопления));
	НаборыРегистров.Добавить(
		Новый Структура(КлючиСтруктуры, "ДобавленныеРегистрыБухгалтерии", РегистрыБухгалтерии));
	НаборыРегистров.Добавить(
		Новый Структура(КлючиСтруктуры, "ДобавленныеРегистрыРасчета", РегистрыРасчета));

	Для Каждого ДанныеНабора Из НаборыРегистров Цикл
		Для Каждого ТекущаяТаблица Из ЭтотОбъект[ДанныеНабора.ИмяТаблицы] Цикл
			Если ДанныеНабора.Менеджер = РегистрыБухгалтерии Тогда
				НаборЗаписей = РеквизитФормыВЗначение(ТекущаяТаблица.Имя);
				НаборЗаписей.Отбор.Регистратор.Установить(ТекущийОбъект);

				Если ЗаписьВРежимеОбмена Тогда
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
				КонецЕсли;

				УстановитьДополнительныеСвойства(НаборЗаписей.ДополнительныеСвойства);

				НаборЗаписей.Записать();

				Продолжить;
			КонецЕсли;

			НаборЗаписей = ДанныеНабора.Менеджер[ТекущаяТаблица.ИмяТаблицы].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийОбъект);

			Для Каждого Запись Из ЭтотОбъект[ТекущаяТаблица.Имя] Цикл
				Если ТекущаяТаблица.Реквизиты.Количество() = 1
					И ИсключаемоеСвойство(ТекущаяТаблица.Реквизиты[0].Значение,
						СвойстваОбъекта, ГруппаМетаданных) Тогда

					Прервать;
				КонецЕсли;

				НоваяЗапись = НаборЗаписей.Добавить();

				Для Каждого ТекущийРеквизит Из ТекущаяТаблица.Реквизиты Цикл
					Если ИсключаемоеСвойство(ТекущийРеквизит.Значение, СвойстваОбъекта, ГруппаМетаданных) Тогда
						Продолжить;
					КонецЕсли;

					ДлинаСуффикса = СтрДлина("_ПредставлениеХранилища");
					Если Прав(ТекущийРеквизит.Значение, ДлинаСуффикса) = "_ПредставлениеХранилища" Тогда
						Продолжить;
					КонецЕсли;

					ДлинаСуффикса = СтрДлина("_АдресХранилища");
					Если Прав(ТекущийРеквизит.Значение, ДлинаСуффикса) = "_АдресХранилища" Тогда
						Если ПустаяСтрока(Запись[ТекущийРеквизит.Значение]) Тогда
							Продолжить;
						КонецЕсли;

						ИмяРеквизита = Лев(ТекущийРеквизит.Значение,
							СтрДлина(ТекущийРеквизит.Значение) - ДлинаСуффикса);

						НовоеЗначение = ПолучитьИзВременногоХранилища(Запись[ТекущийРеквизит.Значение]);
						НоваяЗапись[ИмяРеквизита] = Новый ХранилищеЗначения(НовоеЗначение);

					Иначе
						НоваяЗапись[ТекущийРеквизит.Значение] = Запись[ТекущийРеквизит.Значение];
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			Если ЗаписьВРежимеОбмена Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;

			УстановитьДополнительныеСвойства(НаборЗаписей.ДополнительныеСвойства);

			НаборЗаписей.Записать(Истина);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбъектМодифицирован(ОповещениеПродолжения)

	Если Модифицированность Тогда
		ОповещениеПродолжитьОперацию = Новый ОписаниеОповещения(
			"Подключаемый_ПослеПроверкиМодифицированности",
			ЭтотОбъект,
			ОповещениеПродолжения);

		ПоказатьВопрос(
			ОповещениеПродолжитьОперацию,
			НСтр("ru = 'Объект был изменен, внесенные изменения будут потеряны. Продолжить?'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеПроверкиМодифицированности(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВкладку(Результат, ДополнительныеПараметры) Экспорт

	СоздаватьЭлементыФормы = Ложь;

	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("УдалитьЭлементыФормы") Тогда
			ОчиститьДанныеОбъекта();
			СоздаватьЭлементыФормы = Истина;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьДанныеОбъекта(СоздаватьЭлементыФормы);
	ЗаполнитьЗаголовкиСтраниц();

	УстановитьЗаголовокФормы();

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Ложь;
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(Знач СоздаватьЭлементыФормы = Ложь)

	Если ОтображатьСиноним Тогда
		Элементы.СвойстваОбъектаИмя.Видимость = Ложь;
		Элементы.СвойстваОбъектаСиноним.Видимость = Истина;
		Элементы.ПланыОбменаОбъектаИмя.Видимость = Ложь;
		Элементы.ПланыОбменаОбъектаСиноним.Видимость = Истина;

	Иначе
		Элементы.СвойстваОбъектаИмя.Видимость = Истина;
		Элементы.СвойстваОбъектаСиноним.Видимость = Ложь;
		Элементы.ПланыОбменаОбъектаИмя.Видимость = Истина;
		Элементы.ПланыОбменаОбъектаСиноним.Видимость = Ложь;
	КонецЕсли;

	ДинамическиеТаблицы = ПолучитьМассивДинамическиеТаблицы();

	Для Каждого ИмяТаблицы Из ДинамическиеТаблицы Цикл
		Для Каждого ТекущаяТаблица Из ЭтотОбъект[ИмяТаблицы] Цикл
			ИмяЭлемента = "Страница" + ТекущаяТаблица.Имя;
			Если СоздаватьЭлементыФормы Тогда
				Если ЭтотОбъект[ТекущаяТаблица.Имя].Количество() = 0 Тогда
					Элементы[ИмяЭлемента].Видимость = Ложь;
				Иначе
					Элементы[ИмяЭлемента].Видимость = Истина;
				КонецЕсли;
			КонецЕсли;

			Если ТекущаяТаблица.ИмяТаблицы = НачальнаяТаблица Тогда
				Элементы.СтраницыТаблиц.ТекущаяСтраница = Элементы[ИмяЭлемента];
				НачальнаяТаблица = "";
			КонецЕсли;

			СтрокаСоответствия = СоответствиеТаблицИСтраниц.НайтиПоЗначению(ТекущаяТаблица.Имя);
			СтрокаСоответствия.Пометка = Элементы[ИмяЭлемента].Видимость;

			Для Каждого ЭлементТаблицы Из ТекущаяТаблица.Элементы Цикл
				Если ОтображатьСиноним Тогда
					Элементы[ЭлементТаблицы.Значение.Имя].Заголовок = ЭлементТаблицы.Значение.СинонимРеквизита;
				Иначе
					Элементы[ЭлементТаблицы.Значение.Имя].Заголовок = ЭлементТаблицы.Значение.ИмяРеквизита;
				КонецЕсли;

				Если Не ПустаяСтрока(ЭлементТаблицы.Значение.ИмяПоляСУБД) Тогда
					Элементы[ЭлементТаблицы.Значение.Имя].Заголовок =
						Элементы[ЭлементТаблицы.Значение.Имя].Заголовок
						+ " (" + ЭлементТаблицы.Значение.ИмяПоляСУБД + ")";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Элементы.ФормаТекстЗапроса.Видимость = ОтображатьСтруктуруСУБД;
	Элементы.СвойстваОбъектаИмяПоляСУБД.Видимость = ОтображатьСтруктуруСУБД;

	Если ГруппаМетаданных = "Документы" Тогда
		Элементы.ПровестиДокумент.Видимость = Истина;
		Элементы.ОтменитьПроведениеДокумента.Видимость = Истина;
	Иначе
		Элементы.ПровестиДокумент.Видимость = Ложь;
		Элементы.ОтменитьПроведениеДокумента.Видимость = Ложь;
	КонецЕсли;

	Если ГруппаМетаданных = "Справочники"
		Или ГруппаМетаданных = "Документы"
		Или ГруппаМетаданных = "БизнесПроцессы"
		Или ГруппаМетаданных = "Задачи"
		Или ГруппаМетаданных = "ПланыСчетов"
		Или ГруппаМетаданных = "ПланыОбмена"
		Или ГруппаМетаданных = "ПланыВидовХарактеристик"
		Или ГруппаМетаданных = "ПланыВидовРасчета" Тогда

		Элементы.ПометитьНаУдалениеСнятьПометку.Видимость = Истина;
		Элементы.УдалитьНепосредственно.Видимость = Истина;
	Иначе
		Элементы.ПометитьНаУдалениеСнятьПометку.Видимость = Ложь;
		Элементы.УдалитьНепосредственно.Видимость = Ложь;
	КонецЕсли;

	Если ОтображатьКомандуСвязанныеДокументы(ГруппаМетаданных) Тогда
		Элементы.СвязанныеДокументы.Видимость = Истина;
	Иначе
		Элементы.СвязанныеДокументы.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	ЭлементОформления = УсловноеОформление.Элементы.Добавить();

	Поле = ЭлементОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланыОбменаОбъектаНомерОтправленного.Имя);

	Отбор = ПолучитьЭлементОтбораУсловногоОформления(ЭлементОформления, "ПланыОбменаОбъекта.Узел");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Отбор = ПолучитьЭлементОтбораУсловногоОформления(ЭлементОформления, "ПланыОбменаОбъекта.НомерОтправленного");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = 0;

	Отбор = ПолучитьЭлементОтбораУсловногоОформления(ЭлементОформления, "ПланыОбменаОбъекта.Зарегистрирован");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не выгружалось'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);

	ЭлементОформления = УсловноеОформление.Элементы.Добавить();

	Поле = ЭлементОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланыОбменаОбъектаНомерОтправленного.Имя);

	Отбор = ПолучитьЭлементОтбораУсловногоОформления(ЭлементОформления, "ПланыОбменаОбъекта.Узел");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Отбор = ПолучитьЭлементОтбораУсловногоОформления(ЭлементОформления, "ПланыОбменаОбъекта.НомерОтправленного");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = 0;

	Отбор = ПолучитьЭлементОтбораУсловногоОформления(ЭлементОформления, "ПланыОбменаОбъекта.Зарегистрирован");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не зарегистрирован'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);

КонецПроцедуры

&НаСервере
Функция ПолучитьЭлементОтбораУсловногоОформления(ЭлементОформления, ИмяПоля)

	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);

	Возврат Отбор;

КонецФункции

&НаСервере
Процедура ОчиститьДанныеОбъекта()

	УдаляемыеРеквизиты = Новый Массив();
	СоответствиеТаблицИСтраниц.Очистить();

	ДинамическиеТаблицы = ПолучитьМассивДинамическиеТаблицы();

	Для Каждого ИмяТаблицы Из ДинамическиеТаблицы Цикл
		Для Каждого ТекущаяТаблица Из ЭтотОбъект[ИмяТаблицы] Цикл
			Для Каждого ЭлементТаблицы Из ТекущаяТаблица.Элементы Цикл
				Элементы.Удалить(Элементы[ЭлементТаблицы.Значение.Имя]);
			КонецЦикла;

			Элементы.Удалить(Элементы[ТекущаяТаблица.Имя]);
			Элементы.Удалить(Элементы["Страница" + ТекущаяТаблица.Имя]);

			Для Каждого РеквизитТаблицы Из ТекущаяТаблица.Реквизиты Цикл
				УдаляемыеРеквизиты.Добавить(ТекущаяТаблица.Имя + "." + РеквизитТаблицы.Значение);
			КонецЦикла;

			УдаляемыеРеквизиты.Добавить(ТекущаяТаблица.Имя);
		КонецЦикла;

		ЭтотОбъект[ИмяТаблицы].Очистить();
	КонецЦикла;

	ИзменитьРеквизиты(, УдаляемыеРеквизиты);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбъекта(Знач СоздаватьЭлементыФормы = Истина)

	СоответствиеТаблицИСтраниц.Добавить("ПланыОбменаОбъекта", "СтраницаПланов", Элементы.СтраницаПланов.Видимость);

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	Если ОтображатьСтруктуруСУБД Тогда
		СтруктураХраненияБазы = ПолучитьИзВременногоХранилища(АдресСтруктурыХраненияБазы);
	Иначе
		СтруктураХраненияБазы = Неопределено;
	КонецЕсли;

	ПолноеИмяМетаданного = "" + ПрефиксЗапроса + "." + ИмяОбъекта;

	СвойстваОбъекта.Очистить();

	ВидимостьСтраницыПлановОбмена = СоответствиеТаблицИСтраниц.НайтиПоЗначению("ПланыОбменаОбъекта");
	Если ВидимостьСтраницыПлановОбмена = Неопределено Тогда
		ПометкаВидимостиСтраницыПлановОбмена = Элементы.СтраницаПланов.Видимость;
	Иначе
		ПометкаВидимостиСтраницыПлановОбмена = ВидимостьСтраницыПлановОбмена.Пометка;
	КонецЕсли;

	СоответствиеТаблицИСтраниц.Очистить();
	// BSLLS:DuplicatedInsertionIntoCollection-off
	СоответствиеТаблицИСтраниц.Добавить("ПланыОбменаОбъекта", "СтраницаПланов", ПометкаВидимостиСтраницыПлановОбмена);
	// BSLLS:DuplicatedInsertionIntoCollection-on

	Если ГруппаМетаданных = "Константы" Тогда
		// BSLLS:DuplicateStringLiteral-off
		СтрокаСвойства = СвойстваОбъекта.Добавить();
		СтрокаСвойства.ИндексКартинки = 15;
		СтрокаСвойства.Имя = "Значение";
		СтрокаСвойства.Синоним = "Значение";
		СтрокаСвойства.ИмяПоляСУБД = СформироватьИмяПоляСУБД(СтруктураХраненияБазы, ПолноеИмяМетаданного, "Значение");
		// BSLLS:DuplicateStringLiteral-on

		ЗначениеСвойства = Константы[ТекущийОбъект].Получить();

		СтрокаСвойства.ОписаниеТипов = Метаданные.Константы[ТекущийОбъект].Тип;
		СтрокаСвойства.Тип = ОбработкаОбъект.ПредставлениеТипаРеквизита(
			Метаданные.Константы[ТекущийОбъект].Тип,
			ЗначениеСвойства);

		Если ТипЗнч(ЗначениеСвойства) = Тип("ХранилищеЗначения") Тогда
			ДанныеХранилища = ЗначениеСвойства.Получить();
			СтрокаСвойства.Значение = "(" + Строка(ТипЗнч(ДанныеХранилища)) + ")";
			СтрокаСвойства.АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеХранилища, УникальныйИдентификатор);
		Иначе
			СтрокаСвойства.Значение = ЗначениеСвойства;
			СтрокаСвойства.АдресХранилища = "";
		КонецЕсли;

	ИначеЕсли ГруппаМетаданных = "РегистрыСведений" Тогда
		ОбъектМетаданных = Метаданные[ГруппаМетаданных][ИмяОбъекта];

		МенеджерЗаписи = РегистрыСведений[ИмяОбъекта].СоздатьМенеджерЗаписи();
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначениеКопирования);
		Иначе
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущийОбъект);
		КонецЕсли;
		МенеджерЗаписи.Прочитать();

		ЗаполнитьСтандартныеРеквизитыОбъекта(МенеджерЗаписи, ОбъектМетаданных,
			СтруктураХраненияБазы, ПолноеИмяМетаданного);
		ЗаполнитьРеквизитыОбъекта(МенеджерЗаписи, ОбъектМетаданных.СтандартныеРеквизиты,
			ПиктограммыМетаданных.СтандартныеРеквизиты, СтруктураХраненияБазы, ПолноеИмяМетаданного);
		ЗаполнитьРеквизитыОбъекта(МенеджерЗаписи, ОбъектМетаданных.Измерения,
			ПиктограммыМетаданных.Измерения, СтруктураХраненияБазы, ПолноеИмяМетаданного);
		ЗаполнитьРеквизитыОбъекта(МенеджерЗаписи, ОбъектМетаданных.Ресурсы,
			ПиктограммыМетаданных.Ресурсы, СтруктураХраненияБазы, ПолноеИмяМетаданного);
		ЗаполнитьРеквизитыОбъекта(МенеджерЗаписи, ОбъектМетаданных.Реквизиты,
			ПиктограммыМетаданных.Реквизиты, СтруктураХраненияБазы, ПолноеИмяМетаданного);

	Иначе
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ОбъектИсточник = ЗначениеКопирования.ПолучитьОбъект();
		Иначе
			ОбъектИсточник = ТекущийОбъект.ПолучитьОбъект();
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекущийОбъект) И ОбъектИсточник = Неопределено Тогда
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			МенеджерОбъекта = ОбработкаОбъект.ПолучитьМенеджерОбъекта(ГруппаМетаданных, ИмяОбъекта);
			Если ГруппаМетаданных = "Документы" Тогда
				ОбъектИсточник = МенеджерОбъекта.СоздатьДокумент();
			Иначе
				ОбъектИсточник = МенеджерОбъекта.СоздатьЭлемент();
			КонецЕсли;
			ОбъектИсточник.УстановитьСсылкуНового(ТекущийОбъект);
		КонецЕсли;

		ОбъектМетаданных = Метаданные[ГруппаМетаданных][ИмяОбъекта];

		ОбъектыСИерархией = Новый Массив();
		ОбъектыСИерархией.Добавить("Справочники");
		ОбъектыСИерархией.Добавить("ПланыВидовХарактеристик");

		ЭтоГруппа = Неопределено;
		Если ОбъектыСИерархией.Найти(ГруппаМетаданных) <> Неопределено Тогда
			ЭтоГруппа = ОбъектМетаданных.Иерархический
				И (ГруппаМетаданных = "ПланыВидовХарактеристик"
					Или ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов)
				И ОбъектИсточник.ЭтоГруппа;
		КонецЕсли;

		СтрокаСвойства = СвойстваОбъекта.Добавить();
		СтрокаСвойства.ИндексКартинки = ПиктограммыМетаданных.Избранное;
		СтрокаСвойства.Имя = "UUID";
		СтрокаСвойства.Синоним = "UUID";
		СтрокаСвойства.Тип = "УникальныйИдентификатор";
		СтрокаСвойства.Значение = ТекущийОбъект.УникальныйИдентификатор();

		НавигационнаяСсылкаОбъекта = ПолучитьНавигационнуюСсылку(ТекущийОбъект);

		СтрокаСвойства = СвойстваОбъекта.Добавить();
		СтрокаСвойства.ИндексКартинки = ПиктограммыМетаданных.Избранное;
		СтрокаСвойства.Имя = "Навигационная ссылка";
		СтрокаСвойства.Синоним = "Навигационная ссылка";
		СтрокаСвойства.Тип = "Строка";
		СтрокаСвойства.Значение = НавигационнаяСсылкаОбъекта;

		ПозицияУказателя = СтрНайти(НавигационнаяСсылкаОбъекта, "?ref=");

		// BSLLS:UsingServiceTag-off
		//@skip-check bsl-variable-name-invalid
		// BSLLS:UsingServiceTag-on
		ref = Сред(НавигационнаяСсылкаОбъекта, ПозицияУказателя + СтрДлина("?ref="));

		СтрокаСвойства = СвойстваОбъекта.Добавить();
		СтрокаСвойства.ИндексКартинки = ПиктограммыМетаданных.Избранное;
		СтрокаСвойства.Имя = "ref";
		СтрокаСвойства.Синоним = "ref";
		СтрокаСвойства.Тип = "Строка";
		СтрокаСвойства.Значение = ref;

		ЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектИсточник, ОбъектМетаданных,
			СтруктураХраненияБазы, ПолноеИмяМетаданного);
		ЗаполнитьРеквизитыОбъекта(ОбъектИсточник, ОбъектМетаданных.СтандартныеРеквизиты,
			ПиктограммыМетаданных.СтандартныеРеквизиты, СтруктураХраненияБазы, ПолноеИмяМетаданного);
		ЗаполнитьРеквизитыОбъекта(ОбъектИсточник, ОбъектМетаданных.Реквизиты,
			ПиктограммыМетаданных.Реквизиты, СтруктураХраненияБазы, ПолноеИмяМетаданного, ЭтоГруппа);

		Если СоздаватьЭлементыФормы Тогда
			ВывестиТабличныеЧасти(ОбъектМетаданных, СтруктураХраненияБазы, ПолноеИмяМетаданного, ЭтоГруппа);
		КонецЕсли;

		ЗаполнитьТаблицыОбъекта(ОбъектИсточник);

		Если ГруппаМетаданных = "Документы" Тогда
			Если СоздаватьЭлементыФормы Тогда
				ВывестиТаблицыРегистров(ОбъектМетаданных, СтруктураХраненияБазы);
			КонецЕсли;
			ЗаполнитьТаблицыРегистров();
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьПланыОбмена();

	Если СоздаватьЭлементыФормы Тогда
		УстановитьВидимостьДоступность(СоздаватьЭлементыФормы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектИсточник, МетаданныеОбъекта, СтруктураХраненияБазы,
	ПолноеИмяМетаданного)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	ВариантыИспользованияРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
	ВариантыАвтоИспользованияРеквизита = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита;
	ВариантыРазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита;

	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = ВариантыРазделениеДанных.Разделять Тогда
			Если Не ПараметрыСеанса[ОбщийРеквизит.ИспользованиеРазделенияДанных.Имя] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		НастройкаДляОбъекта = ОбщийРеквизит.Состав.Найти(МетаданныеОбъекта);

		Если НастройкаДляОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВыводитьРеквизит = Ложь;

		Если НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Использовать
			Или (НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Авто
			И ОбщийРеквизит.АвтоИспользование = ВариантыАвтоИспользованияРеквизита.Использовать) Тогда

			ВыводитьРеквизит = Истина;
		КонецЕсли;

		Если Не ВыводитьРеквизит Тогда
			Продолжить;
		КонецЕсли;

		СтрокаСвойства = СвойстваОбъекта.Добавить();
		СтрокаСвойства.ИндексКартинки = ПиктограммыМетаданных.ОбщиеРеквизиты;
		СтрокаСвойства.Имя = ОбщийРеквизит.Имя;
		СтрокаСвойства.ИмяПоляСУБД = СформироватьИмяПоляСУБД(СтруктураХраненияБазы, ПолноеИмяМетаданного,
			ОбщийРеквизит.Имя);

		Если ПустаяСтрока(ОбщийРеквизит.Синоним) Тогда
			СтрокаСвойства.Синоним = ОбщийРеквизит.Имя;
		Иначе
			СтрокаСвойства.Синоним = ОбщийРеквизит.Синоним;
		КонецЕсли;

		ЗначениеСвойства = ОбъектИсточник[ОбщийРеквизит.Имя];

		СтрокаСвойства.Тип = ОбработкаОбъект.ПредставлениеТипаРеквизита(ОбщийРеквизит.Тип, ЗначениеСвойства);
		СтрокаСвойства.ОписаниеТипов = ОбщийРеквизит.Тип;

		Если ТипЗнч(ЗначениеСвойства) = Тип("ХранилищеЗначения") Тогда
			ДанныеХранилища = ЗначениеСвойства.Получить();
			СтрокаСвойства.Значение = "(" + Строка(ТипЗнч(ДанныеХранилища)) + ")";
			СтрокаСвойства.АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеХранилища, УникальныйИдентификатор);
		Иначе
			СтрокаСвойства.Значение = ЗначениеСвойства;
			СтрокаСвойства.АдресХранилища = "";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОбъекта(ОбъектИсточник, КоллекцияРеквизитов, ИндексКартинки,
	СтруктураХраненияБазы, ПолноеИмяМетаданного, ЭтоГруппа = Неопределено)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	Для Каждого ТекущийРеквизит Из КоллекцияРеквизитов Цикл
		Если Не ВыводитьРеквизит(ТекущийРеквизит, ЭтоГруппа) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаСвойства = СвойстваОбъекта.Добавить();
		СтрокаСвойства.ИндексКартинки = ИндексКартинки;
		СтрокаСвойства.Имя = ТекущийРеквизит.Имя;
		СтрокаСвойства.ИмяПоляСУБД = СформироватьИмяПоляСУБД(СтруктураХраненияБазы, ПолноеИмяМетаданного,
			ТекущийРеквизит.Имя);

		Если ПустаяСтрока(ТекущийРеквизит.Синоним) Тогда
			СтрокаСвойства.Синоним = ТекущийРеквизит.Имя;
		Иначе
			СтрокаСвойства.Синоним = ТекущийРеквизит.Синоним;
		КонецЕсли;

		ЗначениеСвойства = ОбъектИсточник[ТекущийРеквизит.Имя];

		СтрокаСвойства.Тип = ОбработкаОбъект.ПредставлениеТипаРеквизита(ТекущийРеквизит.Тип, ЗначениеСвойства);
		СтрокаСвойства.ОписаниеТипов = ТекущийРеквизит.Тип;

		Если ТипЗнч(ЗначениеСвойства) = Тип("ХранилищеЗначения") Тогда
			ДанныеХранилища = ЗначениеСвойства.Получить();
			СтрокаСвойства.Значение = "(" + Строка(ТипЗнч(ДанныеХранилища)) + ")";
			СтрокаСвойства.АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеХранилища, УникальныйИдентификатор);
		Иначе
			СтрокаСвойства.Значение = ЗначениеСвойства;
			СтрокаСвойства.АдресХранилища = "";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЕстьПланыОбменаДляОбъекта()

	ОбъектМетаданное = Метаданные[ГруппаМетаданных][ИмяОбъекта];

	Для Каждого ПланМетаданное Из Метаданные.ПланыОбмена Цикл
		Если ПланМетаданное.Состав.Содержит(ОбъектМетаданное) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура ЗаполнитьПланыОбмена()

	Если Не ЕстьПланыОбменаДляОбъекта() Тогда
		Возврат;
	КонецЕсли;

	ПланыОбменаОбъекта.ПолучитьЭлементы().Очистить();

	ОбъектМетаданное = Метаданные[ГруппаМетаданных][ИмяОбъекта];

	ДобавленныеУзлы = Новый Массив();

	Для Каждого ПланМетаданное Из Метаданные.ПланыОбмена Цикл
		Если ПланМетаданное.Состав.Содержит(ОбъектМетаданное) Тогда
			УзелПлана = ПланыОбменаОбъекта.ПолучитьЭлементы().Добавить();
			УзелПлана.Имя = ПланМетаданное.Имя;
			УзелПлана.ИндексКартинки = ПиктограммыМетаданных.ПланыОбмена;

			Если ПустаяСтрока(ПланМетаданное.Синоним) Тогда
				УзелПлана.Синоним = ПланМетаданное.Имя;
			Иначе
				УзелПлана.Синоним = ПланМетаданное.Синоним;
			КонецЕсли;

			ДанныеУзла = Новый Структура(
				"Идентификатор, ИмяПлана",
				"Ид_" + Формат(УзелПлана.ПолучитьИдентификатор(), "ЧН=0; ЧГ=0;"),
				ПланМетаданное.Имя);
			ДобавленныеУзлы.Добавить(ДанныеУзла);
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьДанныеУзлов(ДобавленныеУзлы);

КонецПроцедуры

&НаСервере
Функция ДобавлятьПоле(МетаданноеПоле)

	Если МетаданноеПоле.Тип = Новый ОписаниеТипов("ХранилищеЗначения")
		Или МетаданноеПоле.Тип = Новый ОписаниеТипов("УникальныйИдентификатор")
		Или МетаданноеПоле.РежимПароля Тогда

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеУзлов(ДобавленныеУзлы)

	Запрос = Новый Запрос();

	ПоляРегистра = Новый Структура();

	Если ГруппаМетаданных = "РегистрыСведений" Тогда
		ОбъектМетаданное = Метаданные[ГруппаМетаданных][ИмяОбъекта];

		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		Если ОбъектМетаданное.ПериодичностьРегистраСведений <> Непериодический
			И ОбъектМетаданное.ОсновнойОтборПоПериоду Тогда

			// BSLLS:DuplicateStringLiteral-off
			ПоляРегистра.Вставить("Период");
			Запрос.УстановитьПараметр("Период", ТекущийОбъект["Период"]);
			// BSLLS:DuplicateStringLiteral-on
		КонецЕсли;

		Для Каждого Измерение Из ОбъектМетаданное.Измерения Цикл
			Если Не ДобавлятьПоле(Измерение) Тогда
				Продолжить;
			КонецЕсли;

			Если Не Измерение.ОсновнойОтбор Тогда
				Продолжить;
			КонецЕсли;

			ПоляРегистра.Вставить(Измерение.Имя, Измерение.Тип);
			Запрос.УстановитьПараметр(Измерение.Имя, ТекущийОбъект[Измерение.Имя]);
		КонецЦикла;

	Иначе
		Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект);
	КонецЕсли;

	Запрос.Текст = ТекстЗапросаУзлов(ДобавленныеУзлы, ПоляРегистра);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторУзла = Число(СтрЗаменить(Выборка.Идентификатор, "Ид_", ""));
		УзелПлана = ПланыОбменаОбъекта.НайтиПоИдентификатору(ИдентификаторУзла);

		Узел = УзелПлана.ПолучитьЭлементы().Добавить();
		Узел.Узел = Выборка.Узел;
		Узел.Имя = Строка(Выборка.Узел);
		Узел.ИндексКартинки = ПиктограммыМетаданных.ПланОбмена;
		Узел.Синоним = Строка(Выборка.Узел);
		Узел.Зарегистрирован = Выборка.Зарегистрирован;
		Узел.НомерОтправленного = Выборка.НомерСообщения;
	КонецЦикла;

	УзлыДляУдаления = Новый Массив();
	Для Каждого Узел Из ПланыОбменаОбъекта.ПолучитьЭлементы() Цикл
		Если Узел.ПолучитьЭлементы().Количество() = 0 Тогда
			УзлыДляУдаления.Добавить(Узел);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Элемент Из УзлыДляУдаления Цикл
		ПланыОбменаОбъекта.ПолучитьЭлементы().Удалить(Элемент);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТекстЗапросаУзлов(ДобавленныеУзлы, ПоляРегистра)

	ИмяТаблицыОбъекта = ПрефиксЗапроса + "." + ИмяОбъекта;

	ТекстЗапросаУзлов = "";

	Для Каждого УзелОбмена Из ДобавленныеУзлы Цикл
		Если Не ПустаяСтрока(ТекстЗапросаУзлов) Тогда
			ТекстЗапросаУзлов = ТекстЗапросаУзлов + "
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;

		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	""%1"" КАК Идентификатор,
		|	ПланОбмена.Ссылка КАК Узел,
		|	ТаблицаИзменений.Узел ЕСТЬ НЕ NULL КАК Зарегистрирован,
		|	ЕСТЬNULL(ТаблицаИзменений.НомерСообщения, 0) КАК НомерСообщения
		|ИЗ
		|	ПланОбмена.%2 КАК ПланОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ %3.Изменения КАК ТаблицаИзменений
		|		ПО (ПланОбмена.Ссылка = ТаблицаИзменений.Узел)
		|		%4
		|ГДЕ
		|	ПланОбмена.ЭтотУзел = ЛОЖЬ";

		ТекстУсловий = "";

		Если ГруппаМетаданных = "РегистрыСведений" Тогда
			Для Каждого Поле Из ПоляРегистра Цикл
				Если Поле.Значение = Новый ОписаниеТипов("УникальныйИдентификатор")
					Или Поле.Значение = Новый ОписаниеТипов("ХранилищеЗначения") Тогда

					Продолжить;
				КонецЕсли;

				ТекстУсловий = ТекстУсловий + " И (ТаблицаИзменений." + Поле.Ключ + " = &" + Поле.Ключ + ")";
			КонецЦикла;

		ИначеЕсли ГруппаМетаданных = "Константы" Тогда
			ТекстУсловий = "";

		Иначе
			ТекстУсловий = "И (ТаблицаИзменений.Ссылка = &Ссылка)";
		КонецЕсли;

		ТекстЗапроса = СтрШаблон(ТекстЗапроса, УзелОбмена.Идентификатор, УзелОбмена.ИмяПлана,
			ИмяТаблицыОбъекта, ТекстУсловий);
		ТекстЗапросаУзлов = ТекстЗапросаУзлов + ТекстЗапроса;
	КонецЦикла;

	Возврат ТекстЗапросаУзлов;

КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьРегистрациюНаУзле(Знач Узел, Знач Объект, Знач Зарегистрировать, Знач ГруппаОбъекта)

	ЭтоКонстанта = ГруппаОбъекта = "Константы";

	Если ЭтоКонстанта Тогда
		МетаданныеОбъекта = Метаданные.Константы[Объект];
	Иначе
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;

	Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		Данные = РегистрыСведений[МетаданныеОбъекта.Имя].СоздатьНаборЗаписей();

		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> Непериодический Тогда
			Данные.Отбор.Период.Установить(Объект["Период"]);
		КонецЕсли;

		Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			Данные.Отбор[Измерение.Имя].Установить(Объект[Измерение.Имя]);
		КонецЦикла;

	ИначеЕсли ЭтоКонстанта Тогда
		Данные = МетаданныеОбъекта;

	Иначе
		Данные = Объект;
	КонецЕсли;

	Если Зарегистрировать Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Данные);
	Иначе
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Данные);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыбратьИзмененияНаУзле(Знач Узел, Знач Объект, Знач НомерСообщения)

	МетаданныеОбъекта = Объект.Метаданные();

	Если Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		Данные = РегистрыСведений[МетаданныеОбъекта.Имя].СоздатьНаборЗаписей();

		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		Если МетаданныеОбъекта.ПериодичностьРегистраСведений <> Непериодический Тогда
			Данные.Отбор.Период.Установить(Объект["Период"]);
		КонецЕсли;

		Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			Данные.Отбор[Измерение.Имя].Установить(Объект[Измерение.Имя]);
		КонецЦикла;

	Иначе
		Данные = Объект;
	КонецЕсли;

	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, Данные);
	// BSLLS:EmptyCodeBlock-off
	Пока Выборка.Следующий() Цикл
		// Выбираем изменения для установки номера сообщения обмена данными.
	КонецЦикла;
	// BSLLS:EmptyCodeBlock-on

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНомерСообщенияЗавершение(НомерСообщения, ДополнительныеПараметры) Экспорт

	Если НомерСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НомерСообщения < 0 Тогда
		НомерСообщения = 0;
	КонецЕсли;

	ИзменитьРегистрациюНаУзле(ДополнительныеПараметры.Узел, ДополнительныеПараметры.Объект, Истина, ГруппаМетаданных);

	Если НомерСообщения > 0 Тогда
		ВыбратьИзмененияНаУзле(ДополнительныеПараметры.Узел, ДополнительныеПараметры.Объект, НомерСообщения);
	КонецЕсли;

	СтрокаУзла = ПланыОбменаОбъекта.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	СтрокаУзла.Зарегистрирован = Истина;
	СтрокаУзла.НомерОтправленного = НомерСообщения;

КонецПроцедуры

&НаСервере
Процедура ВывестиТабличныеЧасти(ОбъектМетаданных, СтруктураХраненияБазы, ПолноеИмяМетаданного, ЭтоГруппа = Неопределено)

	ДобавляемыеРеквизиты = Новый Массив();

	Если ГруппаМетаданных = "ПланыСчетов" Или ГруппаМетаданных = "ПланыВидовРасчета" Тогда
		Для Каждого ТабличнаяЧастьМетаданное Из ОбъектМетаданных.СтандартныеТабличныеЧасти Цикл
			ВывестиТабличнуюЧастьОбъекта(
				ДобавляемыеРеквизиты,
				ТабличнаяЧастьМетаданное,
				Истина,
				СтруктураХраненияБазы,
				ПолноеИмяМетаданного + "." + ТабличнаяЧастьМетаданное.Имя);
		КонецЦикла;
	КонецЕсли;

	Для Каждого ТабличнаяЧастьМетаданное Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если Не ВыводитьРеквизит(ТабличнаяЧастьМетаданное, ЭтоГруппа) Тогда
			Продолжить;
		КонецЕсли;
		ВывестиТабличнуюЧастьОбъекта(
			ДобавляемыеРеквизиты,
			ТабличнаяЧастьМетаданное,
			Ложь,
			СтруктураХраненияБазы,
			ПолноеИмяМетаданного + "." + ТабличнаяЧастьМетаданное.Имя);
	КонецЦикла;

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	Если ГруппаМетаданных = "ПланыСчетов" Или ГруппаМетаданных = "ПланыВидовРасчета" Тогда
		Для Каждого ТабличнаяЧастьМетаданное Из ОбъектМетаданных.СтандартныеТабличныеЧасти Цикл
			ДобавитьЭлементТаблицу(
				ТабличнаяЧастьМетаданное,
				Истина,
				СтруктураХраненияБазы,
				ПолноеИмяМетаданного + "." + ТабличнаяЧастьМетаданное.Имя);
		КонецЦикла;
	КонецЕсли;

	Для Каждого ТабличнаяЧастьМетаданное Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если Не ВыводитьРеквизит(ТабличнаяЧастьМетаданное, ЭтоГруппа) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьЭлементТаблицу(
			ТабличнаяЧастьМетаданное,
			Ложь,
			СтруктураХраненияБазы,
			ПолноеИмяМетаданного + "." + ТабличнаяЧастьМетаданное.Имя);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция НовыйСуффикс()

	НовыйСуффикс = Строка(Новый УникальныйИдентификатор());

	Возврат СтрЗаменить(НовыйСуффикс, "-", "");

КонецФункции

&НаСервере
Процедура ВывестиТабличнуюЧастьОбъекта(ДобавляемыеРеквизиты, ТабличнаяЧастьМетаданное, Стандартная,
	СтруктураХраненияБазы, ПолноеИмяМетаданного)

	СтрокаПривязки = ТабличныеЧасти.Добавить();
	СтрокаПривязки.Имя = "ТабличнаяЧасть_" + НовыйСуффикс();
	СтрокаПривязки.ИмяТаблицы = ТабличнаяЧастьМетаданное.Имя;

	Если ОтображатьСтруктуруСУБД Тогда
		СтрокиТаблиц = СтруктураХраненияБазы.НайтиСтроки(Новый Структура("ИмяТаблицы", ПолноеИмяМетаданного));
		Если СтрокиТаблиц.Количество() Тогда
			СтрокаПривязки.ИмяТаблицыСУБД = СтрокиТаблиц[0].ИмяТаблицыХранения;
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(ТабличнаяЧастьМетаданное.Синоним) Тогда
		СтрокаПривязки.Синоним = ТабличнаяЧастьМетаданное.Имя;
	Иначе
		СтрокаПривязки.Синоним = ТабличнаяЧастьМетаданное.Синоним;
	КонецЕсли;

	ДобавитьРеквизитТаблицу(ДобавляемыеРеквизиты, СтрокаПривязки, ТабличнаяЧастьМетаданное, Стандартная);

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитТаблицу(ДобавляемыеРеквизиты, СтрокаПривязки, ТаблицаМетаданное, Стандартная)

	ТабличнаяЧасть = Новый РеквизитФормы(
		СтрокаПривязки.Имя,
		Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(ТабличнаяЧасть);

	Для Каждого РеквизитМетаданное Из ТаблицаМетаданное.СтандартныеРеквизиты Цикл
		ДобавитьРеквизитКолонкаТаблицы(ДобавляемыеРеквизиты, СтрокаПривязки, РеквизитМетаданное);
	КонецЦикла;

	Если Не Стандартная Тогда
		Для Каждого РеквизитМетаданное Из ТаблицаМетаданное.Реквизиты Цикл
			ДобавитьРеквизитКолонкаТаблицы(ДобавляемыеРеквизиты, СтрокаПривязки, РеквизитМетаданное);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитКолонкаТаблицы(ДобавляемыеРеквизиты, СтрокаПривязки, РеквизитМетаданное)

	ТипыРеквизита = РеквизитМетаданное.Тип.Типы();

	Если ТипыРеквизита.Количество() И ТипыРеквизита[0] = Тип("ХранилищеЗначения") Тогда
		ИмяРеквизита = РеквизитМетаданное.Имя + "_ПредставлениеХранилища";

		ТабличнаяЧастьКолонка = Новый РеквизитФормы(
			ИмяРеквизита,
			Новый ОписаниеТипов("Строка"),
			СтрокаПривязки.Имя);
		ДобавляемыеРеквизиты.Добавить(ТабличнаяЧастьКолонка);

		СтрокаПривязки.Реквизиты.Добавить(ИмяРеквизита);

		ИмяРеквизита = РеквизитМетаданное.Имя + "_АдресХранилища";

		ТабличнаяЧастьКолонка = Новый РеквизитФормы(
			ИмяРеквизита,
			Новый ОписаниеТипов("Строка"),
			СтрокаПривязки.Имя);
		ДобавляемыеРеквизиты.Добавить(ТабличнаяЧастьКолонка);

		СтрокаПривязки.Реквизиты.Добавить(ИмяРеквизита);

	Иначе
		ИмяРеквизита = РеквизитМетаданное.Имя;

		ТабличнаяЧастьКолонка = Новый РеквизитФормы(
			ИмяРеквизита,
			РеквизитМетаданное.Тип,
			СтрокаПривязки.Имя);
		ДобавляемыеРеквизиты.Добавить(ТабличнаяЧастьКолонка);

		СтрокаПривязки.Реквизиты.Добавить(ИмяРеквизита);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементТаблицу(ТаблицаМетаданное, Стандартная, СтруктураХраненияБазы, ПолноеИмяМетаданного)

	СтрокаПривязки = Неопределено;

	Для Каждого СтрокаПоиск Из ТабличныеЧасти Цикл
		Если СтрокаПоиск.ИмяТаблицы = ТаблицаМетаданное.Имя Тогда
			СтрокаПривязки = СтрокаПоиск;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	СтраницаТаблицы = Элементы.Добавить("Страница" + СтрокаПривязки.Имя,
		Тип("ГруппаФормы"), Элементы.СтраницыТаблиц);
	СтраницаТаблицы.Вид = ВидГруппыФормы.Страница;
	СтраницаТаблицы.Картинка = БиблиотекаКартинок.ВложеннаяТаблица;

	Таблица = Элементы.Добавить(СтрокаПривязки.Имя, Тип("ТаблицаФормы"), СтраницаТаблицы);
	Таблица.ПутьКДанным = СтрокаПривязки.Имя;
	Таблица.УстановитьДействие("ПриИзменении", "Подключаемый_ДинамическаяТаблицаПриИзменении");
	Таблица.УстановитьДействие("ПередНачаломИзменения", "Подключаемый_ДинамическаяТаблицаПередНачаломИзменения");

	Для Каждого РеквизитМетаданное Из ТаблицаМетаданное.СтандартныеРеквизиты Цикл
		ДобавитьЭлементКолонкаТаблицы(Таблица, СтрокаПривязки, РеквизитМетаданное,
			СтруктураХраненияБазы, ПолноеИмяМетаданного);
	КонецЦикла;

	Если Не Стандартная Тогда
		Для Каждого РеквизитМетаданное Из ТаблицаМетаданное.Реквизиты Цикл
			ДобавитьЭлементКолонкаТаблицы(Таблица, СтрокаПривязки, РеквизитМетаданное,
				СтруктураХраненияБазы, ПолноеИмяМетаданного);
		КонецЦикла;
	КонецЕсли;

	СоответствиеТаблицИСтраниц.Добавить(СтрокаПривязки.Имя, СтраницаТаблицы.Имя);

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементКолонкаТаблицы(ЭлементТаблица, СтрокаПривязки, РеквизитМетаданное,
	СтруктураХраненияБазы, ПолноеИмяМетаданного)

	ТипыРеквизита = РеквизитМетаданное.Тип.Типы();

	Если ТипыРеквизита.Количество() И ТипыРеквизита[0] = Тип("ХранилищеЗначения") Тогда
		ЭтоХранилищеЗначения = Истина;
	Иначе
		ЭтоХранилищеЗначения = Ложь;
	КонецЕсли;

	ИмяЭлемента = СтрокаПривязки.Имя + РеквизитМетаданное.Имя
		+ ?(ЭтоХранилищеЗначения, "_ПредставлениеХранилища", "");

	ЭлементКолонка = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементТаблица);

	Если ЭтоХранилищеЗначения Или ИсключаемоеСвойство(РеквизитМетаданное.Имя, СвойстваОбъекта, ГруппаМетаданных) Тогда
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеНадписи;
	Иначе
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКолонка.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
	КонецЕсли;

	ЭлементКолонка.ПутьКДанным = СтрокаПривязки.Имя + "." + РеквизитМетаданное.Имя
		+ ?(ЭтоХранилищеЗначения, "_ПредставлениеХранилища", "");

	ОписаниеЭлемента = Новый Структура();
	ОписаниеЭлемента.Вставить("Имя", ИмяЭлемента);
	ОписаниеЭлемента.Вставить("ИмяРеквизита", РеквизитМетаданное.Имя);
	ОписаниеЭлемента.Вставить("ИмяПоляСУБД",
		СформироватьИмяПоляСУБД(СтруктураХраненияБазы, ПолноеИмяМетаданного, РеквизитМетаданное.Имя));

	Если ПустаяСтрока(РеквизитМетаданное.Синоним) Тогда
		ОписаниеЭлемента.Вставить("СинонимРеквизита", РеквизитМетаданное.Имя);
	Иначе
		ОписаниеЭлемента.Вставить("СинонимРеквизита", РеквизитМетаданное.Синоним);
	КонецЕсли;

	СтрокаПривязки.Элементы.Добавить(ОписаниеЭлемента);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыОбъекта(ОбъектИсточник)

	ДлинаСуффиксаПредставление = СтрДлина("_ПредставлениеХранилища");
	ДлинаСуффиксаАдрес = СтрДлина("_АдресХранилища");

	Для Каждого ТекущаяТаблица Из ТабличныеЧасти Цикл
		ЭтотОбъект[ТекущаяТаблица.Имя].Очистить();

		Для Каждого СтрокаТаблицы Из ОбъектИсточник[ТекущаяТаблица.ИмяТаблицы] Цикл
			НоваяСтрока = ЭтотОбъект[ТекущаяТаблица.Имя].Добавить();

			Для Каждого ТекущийРеквизит Из ТекущаяТаблица.Реквизиты Цикл
				Если Прав(ТекущийРеквизит.Значение, ДлинаСуффиксаПредставление) = "_ПредставлениеХранилища" Тогда
					ИмяРеквизита = Лев(
						ТекущийРеквизит.Значение,
						СтрДлина(ТекущийРеквизит.Значение) - ДлинаСуффиксаПредставление);

					НоваяСтрока[ТекущийРеквизит.Значение] = "("
						+ Строка(ТипЗнч(СтрокаТаблицы[ИмяРеквизита].Получить())) + ")";

				ИначеЕсли Прав(ТекущийРеквизит.Значение, ДлинаСуффиксаАдрес) = "_АдресХранилища" Тогда
					ИмяРеквизита = Лев(
						ТекущийРеквизит.Значение,
						СтрДлина(ТекущийРеквизит.Значение) - ДлинаСуффиксаАдрес);

					НоваяСтрока[ТекущийРеквизит.Значение] = ПоместитьВоВременноеХранилище(
						СтрокаТаблицы[ИмяРеквизита].Получить(), УникальныйИдентификатор);

				Иначе
					НоваяСтрока[ТекущийРеквизит.Значение] = СтрокаТаблицы[ТекущийРеквизит.Значение];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицыРегистров(ОбъектМетаданных, СтруктураХраненияБазы)

	ДобавляемыеРеквизиты = Новый Массив();

	Для Каждого ТекущийРегистр Из ОбъектМетаданных.Движения Цикл
		ТаблицаПривязки = Неопределено;
		ПрефиксЭлемента = "";
		ПолноеИмяМетаданного = "";

		Если Метаданные.РегистрыСведений.Содержит(ТекущийРегистр) Тогда
			ТаблицаПривязки = ДобавленныеРегистрыСведений;
			ПрефиксЭлемента = "РегистрСведений_";
			ПолноеИмяМетаданного = "РегистрСведений.";

		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ТекущийРегистр) Тогда
			ТаблицаПривязки = ДобавленныеРегистрыНакопления;
			ПрефиксЭлемента = "РегистрНакопления_";
			ПолноеИмяМетаданного = "РегистрНакопления.";

		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ТекущийРегистр) Тогда
			ТаблицаПривязки = ДобавленныеРегистрыБухгалтерии;
			ПрефиксЭлемента = "РегистрБухгалтерии_";
			ПолноеИмяМетаданного = "РегистрБухгалтерии.";

		ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ТекущийРегистр) Тогда
			ТаблицаПривязки = ДобавленныеРегистрыРасчета;
			ПрефиксЭлемента = "РегистрРасчета_";
			ПолноеИмяМетаданного = "РегистрРасчета.";

		Иначе
			Продолжить;
		КонецЕсли;

		ПолноеИмяМетаданного = ПолноеИмяМетаданного + ТекущийРегистр.Имя;

		ВывестиТаблицуРегистра(
			ДобавляемыеРеквизиты,
			ТаблицаПривязки,
			ПрефиксЭлемента,
			ТекущийРегистр,
			СтруктураХраненияБазы,
			ПолноеИмяМетаданного);
	КонецЦикла;

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	Для Каждого ТекущийРегистр Из ОбъектМетаданных.Движения Цикл
		ПолноеИмяМетаданного = "";
		КартинкаСтраницы = Неопределено;

		Если Метаданные.РегистрыСведений.Содержит(ТекущийРегистр) Тогда
			ТаблицаПривязки = ДобавленныеРегистрыСведений;
			ПолноеИмяМетаданного = "РегистрСведений.";
			КартинкаСтраницы = БиблиотекаКартинок.РегистрСведений;

		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ТекущийРегистр) Тогда
			ТаблицаПривязки = ДобавленныеРегистрыНакопления;
			ПолноеИмяМетаданного = "РегистрНакопления.";
			КартинкаСтраницы = БиблиотекаКартинок.РегистрНакопления;

		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ТекущийРегистр) Тогда
			ТаблицаПривязки = ДобавленныеРегистрыБухгалтерии;
			ПолноеИмяМетаданного = "РегистрБухгалтерии.";
			КартинкаСтраницы = БиблиотекаКартинок.РегистрБухгалтерии;

		ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ТекущийРегистр) Тогда
			ТаблицаПривязки = ДобавленныеРегистрыРасчета;
			ПолноеИмяМетаданного = "РегистрРасчета.";
			КартинкаСтраницы = БиблиотекаКартинок.РегистрРасчета;
		Иначе
			Продолжить;

		КонецЕсли;

		ПолноеИмяМетаданного = ПолноеИмяМетаданного + ТекущийРегистр.Имя;

		ДобавитьЭлементРегистр(ТаблицаПривязки, ТекущийРегистр,
			СтруктураХраненияБазы, ПолноеИмяМетаданного, КартинкаСтраницы);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуРегистра(ДобавляемыеРеквизиты, ТаблицаПривязки, ПрефиксЭлемента, РегистрМетаданное,
	СтруктураХраненияБазы, ПолноеИмяМетаданного)

	СтрокаПривязки = ТаблицаПривязки.Добавить();
	СтрокаПривязки.Имя = ПрефиксЭлемента + НовыйСуффикс();
	СтрокаПривязки.ИмяТаблицы = РегистрМетаданное.Имя;

	Если ОтображатьСтруктуруСУБД Тогда
		СтрокиТаблиц = СтруктураХраненияБазы.НайтиСтроки(Новый Структура("ИмяТаблицы", ПолноеИмяМетаданного));
		Если СтрокиТаблиц.Количество() Тогда
			СтрокаПривязки.ИмяТаблицыСУБД = СтрокиТаблиц[0].ИмяТаблицыХранения;
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(РегистрМетаданное.Синоним) Тогда
		СтрокаПривязки.Синоним = РегистрМетаданное.Имя;
	Иначе
		СтрокаПривязки.Синоним = РегистрМетаданное.Синоним;
	КонецЕсли;

	ДобавитьРеквизитТаблицуРегистра(ДобавляемыеРеквизиты, СтрокаПривязки, РегистрМетаданное);

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитТаблицуРегистра(ДобавляемыеРеквизиты, СтрокаПривязки, РегистрМетаданное)

	Если Метаданные.РегистрыБухгалтерии.Содержит(РегистрМетаданное) Тогда
		ТаблицаРегистра = Новый РеквизитФормы(
			СтрокаПривязки.Имя,
			Новый ОписаниеТипов("РегистрБухгалтерииНаборЗаписей." + РегистрМетаданное.Имя));
		ДобавляемыеРеквизиты.Добавить(ТаблицаРегистра);

		Возврат;
	КонецЕсли;

	ТаблицаРегистра = Новый РеквизитФормы(
		СтрокаПривязки.Имя,
		Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(ТаблицаРегистра);

	ВариантыИспользованияРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
	ВариантыАвтоИспользованияРеквизита = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита;
	ВариантыРазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита;

	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = ВариантыРазделениеДанных.Разделять Тогда
			Если Не ПараметрыСеанса[ОбщийРеквизит.ИспользованиеРазделенияДанных.Имя] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		НастройкаДляОбъекта = ОбщийРеквизит.Состав.Найти(РегистрМетаданное);

		Если НастройкаДляОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВыводитьРеквизит = Ложь;

		Если НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Использовать
			Или (НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Авто
			И ОбщийРеквизит.АвтоИспользование = ВариантыАвтоИспользованияРеквизита.Использовать) Тогда

			ВыводитьРеквизит = Истина;
		КонецЕсли;

		Если Не ВыводитьРеквизит Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьРеквизитКолонкаРегистра(ДобавляемыеРеквизиты, СтрокаПривязки, ОбщийРеквизит);
	КонецЦикла;

	Для Каждого РеквизитМетаданное Из РегистрМетаданное.СтандартныеРеквизиты Цикл
		ДобавитьРеквизитКолонкаРегистра(ДобавляемыеРеквизиты, СтрокаПривязки, РеквизитМетаданное);
	КонецЦикла;

	Для Каждого РеквизитМетаданное Из РегистрМетаданное.Измерения Цикл
		ДобавитьРеквизитКолонкаРегистра(ДобавляемыеРеквизиты, СтрокаПривязки, РеквизитМетаданное);
	КонецЦикла;

	Для Каждого РеквизитМетаданное Из РегистрМетаданное.Ресурсы Цикл
		ДобавитьРеквизитКолонкаРегистра(ДобавляемыеРеквизиты, СтрокаПривязки, РеквизитМетаданное);
	КонецЦикла;

	Для Каждого РеквизитМетаданное Из РегистрМетаданное.Реквизиты Цикл
		ДобавитьРеквизитКолонкаРегистра(ДобавляемыеРеквизиты, СтрокаПривязки, РеквизитМетаданное);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитКолонкаРегистра(ДобавляемыеРеквизиты, СтрокаПривязки, РеквизитМетаданное)

	ТипыРеквизита = РеквизитМетаданное.Тип.Типы();

	Если ТипыРеквизита.Количество() И ТипыРеквизита[0] = Тип("ХранилищеЗначения") Тогда
		ИмяРеквизита = РеквизитМетаданное.Имя + "_ПредставлениеХранилища";

		ТаблицаРегистраКолонка = Новый РеквизитФормы(
			ИмяРеквизита,
			Новый ОписаниеТипов("Строка"),
			СтрокаПривязки.Имя);
		ДобавляемыеРеквизиты.Добавить(ТаблицаРегистраКолонка);

		СтрокаПривязки.Реквизиты.Добавить(ИмяРеквизита);

		ИмяРеквизита = РеквизитМетаданное.Имя + "_АдресХранилища";

		ТаблицаРегистраКолонка = Новый РеквизитФормы(
			ИмяРеквизита,
			Новый ОписаниеТипов("Строка"),
			СтрокаПривязки.Имя);
		ДобавляемыеРеквизиты.Добавить(ТаблицаРегистраКолонка);

		СтрокаПривязки.Реквизиты.Добавить(ИмяРеквизита);

	Иначе
		ИмяРеквизита = РеквизитМетаданное.Имя;

		ТаблицаРегистраКолонка = Новый РеквизитФормы(
			ИмяРеквизита,
			РеквизитМетаданное.Тип,
			СтрокаПривязки.Имя);
		ДобавляемыеРеквизиты.Добавить(ТаблицаРегистраКолонка);

		СтрокаПривязки.Реквизиты.Добавить(ИмяРеквизита);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементРегистр(ТаблицаПривязки, РегистрМетаданное, СтруктураХраненияБазы,
	ПолноеИмяМетаданного, КартинкаСтраницы)

	СтрокаПривязки = Неопределено;

	Для Каждого СтрокаПоиск Из ТаблицаПривязки Цикл
		Если СтрокаПоиск.ИмяТаблицы = РегистрМетаданное.Имя Тогда
			СтрокаПривязки = СтрокаПоиск;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	СтраницаТаблицы = Элементы.Добавить("Страница" + СтрокаПривязки.Имя, Тип("ГруппаФормы"),
		Элементы.СтраницыТаблиц);
	СтраницаТаблицы.Вид = ВидГруппыФормы.Страница;
	СтраницаТаблицы.Картинка = КартинкаСтраницы;

	СоответствиеТаблицИСтраниц.Добавить(СтрокаПривязки.Имя, СтраницаТаблицы.Имя);

	Таблица = Элементы.Добавить(СтрокаПривязки.Имя, Тип("ТаблицаФормы"), СтраницаТаблицы);
	Таблица.ПутьКДанным = СтрокаПривязки.Имя;
	Таблица.УстановитьДействие("ПриИзменении", "Подключаемый_ДинамическаяТаблицаПриИзменении");
	Таблица.УстановитьДействие("ПередНачаломИзменения", "Подключаемый_ДинамическаяТаблицаПередНачаломИзменения");

	Если Метаданные.РегистрыБухгалтерии.Содержит(РегистрМетаданное) Тогда
		КолонкиНабораЗаписей = ЭтотОбъект[СтрокаПривязки.Имя].Выгрузить().Колонки;
		Для Каждого Колонка Из КолонкиНабораЗаписей Цикл
			Если Колонка.Имя = "ИсходныйНомерСтроки" Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьЭлементКолонкаРегистра(Таблица, СтрокаПривязки, Колонка,
				СтруктураХраненияБазы, ПолноеИмяМетаданного);
		КонецЦикла;
		Возврат;
	КонецЕсли;

	ВариантыИспользованияРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
	ВариантыАвтоИспользованияРеквизита = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита;
	ВариантыРазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита;

	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = ВариантыРазделениеДанных.Разделять Тогда
			Если Не ПараметрыСеанса[ОбщийРеквизит.ИспользованиеРазделенияДанных.Имя] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		НастройкаДляОбъекта = ОбщийРеквизит.Состав.Найти(РегистрМетаданное);

		Если НастройкаДляОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВыводитьРеквизит = Ложь;

		Если НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Использовать
			Или (НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Авто
			И ОбщийРеквизит.АвтоИспользование = ВариантыАвтоИспользованияРеквизита.Использовать) Тогда

			ВыводитьРеквизит = Истина;
		КонецЕсли;

		Если Не ВыводитьРеквизит Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьЭлементКолонкаРегистра(Таблица, СтрокаПривязки, ОбщийРеквизит,
			СтруктураХраненияБазы, ПолноеИмяМетаданного);
	КонецЦикла;

	Для Каждого РеквизитМетаданное Из РегистрМетаданное.СтандартныеРеквизиты Цикл
		ДобавитьЭлементКолонкаРегистра(Таблица, СтрокаПривязки, РеквизитМетаданное,
			СтруктураХраненияБазы, ПолноеИмяМетаданного);
	КонецЦикла;

	Для Каждого РеквизитМетаданное Из РегистрМетаданное.Измерения Цикл
		ДобавитьЭлементКолонкаРегистра(Таблица, СтрокаПривязки, РеквизитМетаданное,
			СтруктураХраненияБазы, ПолноеИмяМетаданного);
	КонецЦикла;

	Для Каждого РеквизитМетаданное Из РегистрМетаданное.Ресурсы Цикл
		ДобавитьЭлементКолонкаРегистра(Таблица, СтрокаПривязки, РеквизитМетаданное,
			СтруктураХраненияБазы, ПолноеИмяМетаданного);
	КонецЦикла;

	Для Каждого РеквизитМетаданное Из РегистрМетаданное.Реквизиты Цикл
		ДобавитьЭлементКолонкаРегистра(Таблица, СтрокаПривязки, РеквизитМетаданное,
			СтруктураХраненияБазы, ПолноеИмяМетаданного);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементКолонкаРегистра(ЭлементТаблица, СтрокаПривязки, РеквизитМетаданное,
	СтруктураХраненияБазы, ПолноеИмяМетаданного)

	Если ТипЗнч(РеквизитМетаданное) = Тип("КолонкаТаблицыЗначений") Тогда
		ТипыРеквизита = РеквизитМетаданное.ТипЗначения.Типы();
	Иначе
		ТипыРеквизита = РеквизитМетаданное.Тип.Типы();
	КонецЕсли;

	Если ТипыРеквизита.Количество() И ТипыРеквизита[0] = Тип("ХранилищеЗначения") Тогда
		ЭтоХранилищеЗначения = Истина;
	Иначе
		ЭтоХранилищеЗначения = Ложь;
	КонецЕсли;

	ИмяЭлемента = СтрокаПривязки.Имя + РеквизитМетаданное.Имя
		+ ?(ЭтоХранилищеЗначения, "_ПредставлениеХранилища", "");

	ЭлементКолонка = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементТаблица);

	Если ЭтоХранилищеЗначения Или ИсключаемоеСвойство(РеквизитМетаданное.Имя, СвойстваОбъекта, ГруппаМетаданных) Тогда
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеНадписи;
	Иначе
		ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементКолонка.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
	КонецЕсли;

	ЭлементКолонка.ПутьКДанным = СтрокаПривязки.Имя + "." + РеквизитМетаданное.Имя
		+ ?(ЭтоХранилищеЗначения, "_ПредставлениеХранилища", "");

	ОписаниеЭлемента = Новый Структура();
	ОписаниеЭлемента.Вставить("Имя", ИмяЭлемента);
	ОписаниеЭлемента.Вставить("ИмяРеквизита", РеквизитМетаданное.Имя);
	ОписаниеЭлемента.Вставить("ИмяПоляСУБД",
		СформироватьИмяПоляСУБД(СтруктураХраненияБазы, ПолноеИмяМетаданного, РеквизитМетаданное.Имя));

	Если ТипЗнч(РеквизитМетаданное) = Тип("КолонкаТаблицыЗначений") Тогда
		Синоним = РеквизитМетаданное.Заголовок;
	Иначе
		Синоним = РеквизитМетаданное.Синоним;
	КонецЕсли;

	Если ПустаяСтрока(Синоним) Тогда
		ОписаниеЭлемента.Вставить("СинонимРеквизита", РеквизитМетаданное.Имя);
	Иначе
		ОписаниеЭлемента.Вставить("СинонимРеквизита", РеквизитМетаданное.Синоним);
	КонецЕсли;

	СтрокаПривязки.Элементы.Добавить(ОписаниеЭлемента);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыРегистров()

	ЗаполнитьТаблицыРегистра(ДобавленныеРегистрыСведений, РегистрыСведений);
	ЗаполнитьТаблицыРегистра(ДобавленныеРегистрыНакопления, РегистрыНакопления);
	ЗаполнитьТаблицыРегистра(ДобавленныеРегистрыБухгалтерии, РегистрыБухгалтерии);
	ЗаполнитьТаблицыРегистра(ДобавленныеРегистрыРасчета, РегистрыРасчета);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыРегистра(КоллекцияТаблиц, МенеджерМетаданных)

	ДлинаСуффиксаПредставление = СтрДлина("_ПредставлениеХранилища");
	ДлинаСуффиксаАдрес = СтрДлина("_АдресХранилища");

	Для Каждого ТекущаяТаблица Из КоллекцияТаблиц Цикл

		Если МенеджерМетаданных = РегистрыБухгалтерии Тогда
			НаборЗаписей = РеквизитФормыВЗначение(ТекущаяТаблица.Имя);
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийОбъект);
			НаборЗаписей.Прочитать();
			ЗначениеВРеквизитФормы(НаборЗаписей, ТекущаяТаблица.Имя);

			Продолжить;
		КонецЕсли;

		ЭтотОбъект[ТекущаяТаблица.Имя].Очистить();

		НаборЗаписей = МенеджерМетаданных[ТекущаяТаблица.ИмяТаблицы].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ТекущийОбъект);
		НаборЗаписей.Прочитать();

		Для Каждого Запись Из НаборЗаписей Цикл
			НоваяСтрока = ЭтотОбъект[ТекущаяТаблица.Имя].Добавить();

			Для Каждого ТекущийРеквизит Из ТекущаяТаблица.Реквизиты Цикл
				Если Прав(ТекущийРеквизит.Значение, ДлинаСуффиксаПредставление) = "_ПредставлениеХранилища" Тогда
					ИмяРеквизита = Лев(
						ТекущийРеквизит.Значение,
						СтрДлина(ТекущийРеквизит.Значение) - ДлинаСуффиксаПредставление);

					НоваяСтрока[ТекущийРеквизит.Значение] = "("
						+ Строка(ТипЗнч(Запись[ИмяРеквизита].Получить())) + ")";

				ИначеЕсли Прав(ТекущийРеквизит.Значение, ДлинаСуффиксаАдрес) = "_АдресХранилища" Тогда
					ИмяРеквизита = Лев(
						ТекущийРеквизит.Значение,
						СтрДлина(ТекущийРеквизит.Значение) - ДлинаСуффиксаАдрес);

					НоваяСтрока[ТекущийРеквизит.Значение] = ПоместитьВоВременноеХранилище(
						Запись[ИмяРеквизита].Получить(), УникальныйИдентификатор);

				Иначе
					НоваяСтрока[ТекущийРеквизит.Значение] = Запись[ТекущийРеквизит.Значение];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРегистрациюВыделенныхСтрок(Зарегистрировать)

	ВыделенныеСтроки = Элементы.ПланыОбменаОбъекта.ВыделенныеСтроки;

	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строку'"));
		Возврат;
	КонецЕсли;

	УзлыДляОбработки = Новый Массив();

	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		УзелПлана = ПланыОбменаОбъекта.НайтиПоИдентификатору(ВыделеннаяСтрока);

		ПодчиненныеУзлы = УзелПлана.ПолучитьЭлементы();

		Если ПодчиненныеУзлы.Количество() = 0 Тогда
			Если УзлыДляОбработки.Найти(УзелПлана) = Неопределено Тогда
				УзлыДляОбработки.Добавить(УзелПлана);
			КонецЕсли;

		Иначе
			Для Каждого ПодчиненныйУзел Из ПодчиненныеУзлы Цикл
				Если УзлыДляОбработки.Найти(ПодчиненныйУзел) = Неопределено Тогда
					УзлыДляОбработки.Добавить(ПодчиненныйУзел);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Для Каждого УзелДляОбработки Из УзлыДляОбработки Цикл
		ИзменитьРегистрациюНаУзле(УзелДляОбработки.Узел, ТекущийОбъект, Зарегистрировать, ГруппаМетаданных);
		УзелДляОбработки.Зарегистрирован = Зарегистрировать;
		УзелДляОбработки.НомерОтправленного = 0;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция СформироватьИмяПоляСУБД(СтруктураХраненияБазы, ИмяТаблицы, ИмяПоля)

	Если Не ОтображатьСтруктуруСУБД Тогда
		Возврат "";
	КонецЕсли;

	ИмяПоляСУБД = "";

	СтрокиТаблиц = СтруктураХраненияБазы.НайтиСтроки(Новый Структура("ИмяТаблицы", ИмяТаблицы));

	Если СтрокиТаблиц.Количество() Тогда
		Для Каждого ТекущееПоле Из СтрокиТаблиц[0].Поля Цикл
			Если Не ТекущееПоле.ИмяПоля = ИмяПоля Тогда
				Продолжить;
			КонецЕсли;

			ИмяПоляСУБД = ИмяПоляСУБД + ?(ИмяПоляСУБД = "", "", ", ") + ТекущееПоле.ИмяПоляХранения;
		КонецЦикла;
	КонецЕсли;

	Возврат ИмяПоляСУБД;

КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеУникальногоИдентификатора(ТекущееЗначение, ИмяТаблицы, ИмяКолонки,
	ИдентификаторСтроки, Отказ)

	Если Не ТипЗнч(ТекущееЗначение) = Тип("УникальныйИдентификатор") Тогда
		Возврат;
	КонецЕсли;

	Отказ = Истина;

	ПараметрыФормы = Новый Структура("ТекущееЗначение", ТекущееЗначение);

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	ДополнительныеПараметры.Вставить("ИмяКолонки", ИмяКолонки);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);

	Оповещение = Новый ОписаниеОповещения(
		"Подключаемый_ПослеИзмененияИдентификатора",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ОткрытьФормуРедактора("РедакторИдентификатора", ПараметрыФормы, ЭтотОбъект, , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеИзмененияИдентификатора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяТаблица = ЭтотОбъект[ДополнительныеПараметры.ИмяТаблицы];
	ТекущаяСтрока = ТекущаяТаблица.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока[ДополнительныеПараметры.ИмяКолонки] = РезультатЗакрытия;

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

	УстановитьВидимостьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеХранилищаЗначения(ДанныеСтроки, ИмяТаблицы, ИмяКолонки,
	ИдентификаторСтроки, Отказ)

	РедактированиеХранилища = Ложь;
	АдресХранилища = "";

	ДлинаСуффиксаПредставления = СтрДлина("_ПредставлениеХранилища");

	Если Прав(ИмяКолонки, ДлинаСуффиксаПредставления) = "_ПредставлениеХранилища" Тогда
		РедактированиеХранилища = Истина;

		ИмяРеквизитаХранилища = Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - ДлинаСуффиксаПредставления) + "_АдресХранилища";

		АдресХранилища = ДанныеСтроки[ИмяРеквизитаХранилища];
	КонецЕсли;

	Если ИмяТаблицы = "СвойстваОбъекта" И Не ПустаяСтрока(ДанныеСтроки.АдресХранилища) Тогда
		РедактированиеХранилища = Истина;
		АдресХранилища = ДанныеСтроки.АдресХранилища;
	КонецЕсли;

	Если Не РедактированиеХранилища Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(АдресХранилища) Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);

		ТекущаяТаблица = ЭтотОбъект[ИмяТаблицы];
		ТекущаяСтрока = ТекущаяТаблица.НайтиПоИдентификатору(ИдентификаторСтроки);

		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяРеквизитаХранилища = Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - ДлинаСуффиксаПредставления) + "_АдресХранилища";

		ТекущаяСтрока[ИмяРеквизитаХранилища] = АдресХранилища;
	КонецЕсли;

	Отказ = Истина;

	ПараметрыФормы = Новый Структура("АдресХранилища", АдресХранилища);

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	ДополнительныеПараметры.Вставить("ИмяКолонки", ИмяКолонки);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);

	Оповещение = Новый ОписаниеОповещения(
		"Подключаемый_ПослеИзмененияДанныхХранилища",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ОткрытьФормуРедактора("РедакторХранилищаЗначений", ПараметрыФормы, ЭтотОбъект, , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеИзмененияДанныхХранилища(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяТаблица = ЭтотОбъект[ДополнительныеПараметры.ИмяТаблицы];
	ТекущаяСтрока = ТекущаяТаблица.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока[ДополнительныеПараметры.ИмяКолонки] = РезультатЗакрытия;

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

	УстановитьВидимостьДоступность();

КонецПроцедуры

&НаКлиенте
Функция НайтиТаблицуПоИмени(ИмяЭлемента)

	ДинамическиеТаблицы = ПолучитьМассивДинамическиеТаблицы();

	Для Каждого ИмяТаблицы Из ДинамическиеТаблицы Цикл
		Для Каждого ТекущаяТаблица Из ЭтотОбъект[ИмяТаблицы] Цикл
			Если ТекущаяТаблица.Имя = ИмяЭлемента Тогда
				Возврат ТекущаяТаблица;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ОбновитьКолонкуНомерСтроки(ИмяЭлемента)

	ЕстьКолонкаНомерСтроки = Ложь;

	ТаблицаФормы = НайтиТаблицуПоИмени(ИмяЭлемента);

	Для Каждого РеквизитТаблицы Из ТаблицаФормы.Реквизиты Цикл
		Если РеквизитТаблицы.Значение = "НомерСтроки" Тогда
			ЕстьКолонкаНомерСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ЕстьКолонкаНомерСтроки Тогда
		Возврат;
	КонецЕсли;

	НомерСтроки = 1;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект[ИмяЭлемента] Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЭтоСсылочныйТип(Знач Значение)

	ТипЗначения = ТипЗнч(Значение);

	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);

	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		Или Метаданные.Документы.Содержит(ОбъектМетаданных)
		Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		Или Метаданные.Задачи.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗаголовокСтраницы(ЭлементСтраница, ТекстЗаголовка, Таблица)

	Если Таблица.Количество() Тогда
		ЭлементСтраница.Заголовок = СтрШаблон("%1 (%2)", ТекстЗаголовка, Таблица.Количество());
	Иначе
		ЭлементСтраница.Заголовок = ТекстЗаголовка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовкиСтраниц()

	ЗаполнитьЗаголовокСтраницы(Элементы.СтраницаСвойств, НСтр("ru = 'Реквизиты'"), СвойстваОбъекта);

	ЗаполнитьЗаголовокСтраницы(Элементы.СтраницаПланов, НСтр("ru = 'Планы обмена'"),
		ПланыОбменаОбъекта.ПолучитьЭлементы());

	ДинамическиеТаблицы = ПолучитьМассивДинамическиеТаблицы();

	Для Каждого ИмяТаблицы Из ДинамическиеТаблицы Цикл
		Для Каждого ТекущаяТаблица Из ЭтотОбъект[ИмяТаблицы] Цикл
			Если ОтображатьСиноним Тогда
				ЗаголовокТаблицы = ТекущаяТаблица.Синоним;
			Иначе
				ЗаголовокТаблицы = ТекущаяТаблица.ИмяТаблицы;
			КонецЕсли;

			ИмяЭлемента = "Страница" + ТекущаяТаблица.Имя;
			ЗаполнитьЗаголовокСтраницы(Элементы[ИмяЭлемента], ЗаголовокТаблицы,
				ЭтотОбъект[ТекущаяТаблица.Имя]);

			Если Не ПустаяСтрока(ТекущаяТаблица.ИмяТаблицыСУБД) Тогда
				Элементы[ИмяЭлемента].Заголовок =
					Элементы[ИмяЭлемента].Заголовок
					+ " (" + ТекущаяТаблица.ИмяТаблицыСУБД + ")";
			КонецЕсли;

			ТекущаяТаблица.КоличествоЗаписей = ЭтотОбъект[ТекущаяТаблица.Имя].Количество();
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивДинамическиеТаблицы()

	ДинамическиеТаблицы = Новый Массив();
	ДинамическиеТаблицы.Добавить("ТабличныеЧасти");
	ДинамическиеТаблицы.Добавить("ДобавленныеРегистрыСведений");
	ДинамическиеТаблицы.Добавить("ДобавленныеРегистрыНакопления");
	ДинамическиеТаблицы.Добавить("ДобавленныеРегистрыБухгалтерии");
	ДинамическиеТаблицы.Добавить("ДобавленныеРегистрыРасчета");

	Возврат ДинамическиеТаблицы;

КонецФункции

&НаКлиенте
Процедура ПослеИзмененияНастроек(РезультатЗакрытия)

	НужноОбновитьФорму = Ложь;

	// BSLLS:UnusedLocalVariable-off
	Если РезультатЗакрытия.Свойство("ОтображатьСиноним") Тогда
		Если ОтображатьСиноним <> РезультатЗакрытия.ОтображатьСиноним Тогда
			ОтображатьСиноним = РезультатЗакрытия.ОтображатьСиноним;
			НужноОбновитьФорму = Истина;
		КонецЕсли;
	КонецЕсли;

	Если РезультатЗакрытия.Свойство("ОтображатьСтруктуруСУБД") Тогда
		Если ОтображатьСтруктуруСУБД <> РезультатЗакрытия.ОтображатьСтруктуруСУБД Тогда
			ОтображатьСтруктуруСУБД = РезультатЗакрытия.ОтображатьСтруктуруСУБД;

			Если ПустаяСтрока(АдресСтруктурыХраненияБазы) Тогда
				ОтображатьСтруктуруСУБД = Ложь;
			Иначе
				НужноОбновитьФорму = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// BSLLS:UnusedLocalVariable-on

	Если НужноОбновитьФорму Тогда
		ПараметрыОбновления = Новый Структура();
		ПараметрыОбновления.Вставить("УдалитьЭлементыФормы", Истина);

		ОповещениеОбновитьВкладку = Новый ОписаниеОповещения(
			"Подключаемый_ОбновитьВкладку",
			ЭтотОбъект,
			ПараметрыОбновления);

		ПроверитьОбъектМодифицирован(ОповещениеОбновитьВкладку);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОтветаНаВопросОФизическомУдалении(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	// BSLLS:UsingServiceTag-off
	//@skip-check unknown-method-property
	// BSLLS:UsingServiceTag-on
	УдалитьНепосредственноНаСервере();

	// BSLLS:UnusedLocalVariable-off
	ПроверятьМодифицированность = Ложь;
	// BSLLS:UnusedLocalVariable-on

	Закрыть();

КонецПроцедуры

&НаСервере
Процедура УдалитьНепосредственноНаСервере()

	Если Не ЭтоСсылочныйТип(ТекущийОбъект) Тогда
		Возврат;
	КонецЕсли;

	// BSLLS:SetPrivilegedMode-off
	УстановитьПривилегированныйРежим(Истина);
	// BSLLS:SetPrivilegedMode-on

	ОбъектИзБазы = ТекущийОбъект.ПолучитьОбъект();
	Если ОбъектИзБазы <> Неопределено Тогда
		ОбъектИзБазы.Удалить();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ПровестиДокументНаСервере()

	Если Не ГруппаМетаданных = "Документы" Тогда
		Возврат;
	КонецЕсли;

	// BSLLS:SetPrivilegedMode-off
	УстановитьПривилегированныйРежим(Истина);
	// BSLLS:SetPrivilegedMode-on

	ОбъектИзБазы = ТекущийОбъект.ПолучитьОбъект();
	Если ОбъектИзБазы <> Неопределено Тогда
		ОбъектИзБазы.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеДокументаНаСервере()

	Если Не ГруппаМетаданных = "Документы" Тогда
		Возврат;
	КонецЕсли;

	// BSLLS:SetPrivilegedMode-off
	УстановитьПривилегированныйРежим(Истина);
	// BSLLS:SetPrivilegedMode-on

	ОбъектИзБазы = ТекущийОбъект.ПолучитьОбъект();
	Если ОбъектИзБазы <> Неопределено Тогда
		ОбъектИзБазы.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПометкаУдаленияУстановлена(Знач Ссылка)

	Возврат Ссылка.ПометкаУдаления;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПометитьНаУдалениеСнятьПометку(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ИзменитьПометкуУдаленияНаСервере(ДополнительныеПараметры);

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("УдалитьЭлементыФормы", Истина);

	ОповещениеОбновитьВкладку = Новый ОписаниеОповещения(
		"Подключаемый_ОбновитьВкладку",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ВыполнитьОбработкуОповещения(ОповещениеОбновитьВкладку);

КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкуУдаленияНаСервере(Знач ЗначениеПометки)

	Если Не ЭтоСсылочныйТип(ТекущийОбъект) Тогда
		Возврат;
	КонецЕсли;

	// BSLLS:SetPrivilegedMode-off
	УстановитьПривилегированныйРежим(Истина);
	// BSLLS:SetPrivilegedMode-on

	ОбъектИзБазы = ТекущийОбъект.ПолучитьОбъект();
	Если ОбъектИзБазы <> Неопределено Тогда
		ОбъектИзБазы.УстановитьПометкуУдаления(ЗначениеПометки);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтображатьКомандуСвязанныеДокументы(ГруппаМетаданных)

	Если Метаданные.ОбщиеФормы.Найти("СвязанныеДокументы") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы["СвязанныеДокументы"]) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ГруппаМетаданных = "Документы" Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактора(ИмяФормы, Параметры, Владелец, Уникальность = Неопределено,
	ОписаниеОповещенияОЗакрытии = Неопределено, РежимОткрытияОкна = Неопределено)

	ПолныйПутьКФорме = ПолныйПутьКФормеНаСервере(ИмяФормы);

	ОткрытьФорму(
		ПолныйПутьКФорме,
		Параметры,
		Владелец,
		Уникальность, , ,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкна);

КонецПроцедуры

&НаСервере
Функция ПолныйПутьКФормеНаСервере(Знач ИмяФормы)

	Возврат РеквизитФормыВЗначение("Объект").ПолныйПутьКФормеНаСервере(ИмяФормы);

КонецФункции

&НаСервере
Процедура УстановитьДополнительныеСвойства(ДополнительныеСвойстваОбъекта)

	Для Каждого СтрокаСвойства Из ДополнительныеСвойства Цикл
		Если Не СтрокаСвойства.Пометка Тогда
			Продолжить;
		КонецЕсли;

		ДополнительныеСвойстваОбъекта.Вставить(СтрокаСвойства.Ключ, СтрокаСвойства.Значение);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция УпаковатьДополнительныеСвойства()

	Результат = Новый Массив();

	Для Каждого СтрокаСвойств Из ДополнительныеСвойства Цикл
		НовоеСвойство = Новый Структура();
		НовоеСвойство.Вставить("Ключ", СтрокаСвойств.Ключ);
		НовоеСвойство.Вставить("Значение", СтрокаСвойств.Значение);
		НовоеСвойство.Вставить("Пометка", СтрокаСвойств.Пометка);
		Результат.Добавить(НовоеСвойство);
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ИмяТаблицы = Элемент.Родитель.Имя;
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, ИмяТаблицы, "");

	НачалоВыбораРеквизитаИзСписка(Элемент, ИмяРеквизита, ИмяТаблицы, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораРеквизитаИзСписка(ЭлементРеквизита, ИмяРеквизита, ИмяТаблицы, СтандартнаяОбработка)

	Если Элементы[ИмяТаблицы].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// BSLLS:UsingServiceTag-off
	//@skip-check unknown-method-property
	// BSLLS:UsingServiceTag-on
	Если ИспользоватьСтандартнуюФормуВыбора
		Или Не ЭтоСсылочныйТип(Элементы[ИмяТаблицы].ТекущиеДанные[ИмяРеквизита]) Тогда

		ЭлементРеквизита.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;

		Возврат;

	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВыборЗначения", Элементы[ИмяТаблицы].ТекущиеДанные[ИмяРеквизита]);
	ПараметрыФормы.Вставить("КоличествоОтображаемыхРеквизитов", КоличествоОтображаемыхРеквизитов);
	ПараметрыФормы.Вставить("ОтображатьСиноним", ОтображатьСиноним);

	ОткрытьФормуРедактора(
		"НавигацияПоОбъектам",
		ПараметрыФормы,
		ЭлементРеквизита,
		Новый УникальныйИдентификатор, ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ВыводитьРеквизит(Реквизит, ЭтоГруппа)

	ВыводитьРеквизит = Истина;

	Если (ЭтоГруппа = Истина
		И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
		Или (ЭтоГруппа = Ложь
		И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда

		ВыводитьРеквизит = Ложь;
	КонецЕсли;

	Возврат ВыводитьРеквизит;

КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()

	ЭтоНовый = Ложь;

	Если ПрефиксЗапроса = "РегистрСведений" Тогда
		ПредставлениеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ТекущийОбъект)).ПредставлениеЗаписи;
	ИначеЕсли ПрефиксЗапроса = "Константа" Тогда
		ПредставлениеОбъекта = Метаданные[ГруппаМетаданных][ИмяОбъекта].Синоним;
	Иначе
		ПредставлениеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ТекущийОбъект)).ПредставлениеОбъекта;
		Если ЗначениеЗаполнено(ТекущийОбъект) И ТекущийОбъект.ПолучитьОбъект() = Неопределено Тогда
			ЭтоНовый = Истина;
		КонецЕсли;
	КонецЕсли;

	// BSLLS:UnusedLocalVariable-off
	Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
		Если ЭтоНовый Тогда
			Заголовок = СтрШаблон("%1 %2 (%3)", "✎", ИмяОбъекта, НСтр("ru = 'Создание'"));
		Иначе
			Заголовок = СтрШаблон("%1 %2", "✎", Строка(ТекущийОбъект));
		КонецЕсли;
	Иначе
		Если ЭтоНовый Тогда
			Заголовок = СтрШаблон("%1 %2 (%3)", "✎", ПредставлениеОбъекта, НСтр("ru = 'Создание'"));
		Иначе
			Заголовок = СтрШаблон("%1 %2 (%3)", "✎", Строка(ТекущийОбъект), ПредставлениеОбъекта);
		КонецЕсли;
	КонецЕсли;
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОперациюБизнесСтатистики(Знач ИмяОперации, Знач Значение = 1, Знач Комментарий = "")

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение, Комментарий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПиктограммыМетаданных()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// BSLLS:UnusedLocalVariable-off
	ПиктограммыМетаданных = ОбработкаОбъект.ПиктограммыМетаданных();
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

#КонецОбласти