///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("ВыборЗначения") Тогда
		// BSLLS:UnusedLocalVariable-off
		ВыборЗначения = Истина;
		// BSLLS:UnusedLocalVariable-on
		Элементы.ОбъектыМетаданных.Видимость = Ложь;
		Элементы.Список.РежимВыбора = Истина;

		Параметры.Свойство("КоличествоОтображаемыхРеквизитов", КоличествоОтображаемыхРеквизитов);
		Параметры.Свойство("ОтображатьСиноним", ОтображатьСиноним);
		Параметры.Свойство("ВыборЗначения", ТекущийОбъект);

		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		СтруктураПараметров = ОбработкаОбъект.ПолучитьСтруктуруПараметров(ТекущийОбъект);

		СтруктураПараметров.Свойство("ГруппаМетаданных", ГруппаМетаданных);
		СтруктураПараметров.Свойство("ПрефиксЗапроса", ПрефиксЗапроса);
		СтруктураПараметров.Свойство("ИмяОбъекта", ИмяОбъекта);

		// BSLLS:UnusedLocalVariable-off
		АвтоЗаголовок = Ложь;
		Заголовок = ИмяОбъекта;
		Если ОтображатьСиноним Тогда
			Заголовок = Метаданные[ГруппаМетаданных][ИмяОбъекта].Синоним;
		КонецЕсли;
		// BSLLS:UnusedLocalVariable-on

	Иначе
		ВосстановитьНастройки();
		ИнициализироватьСтруктуруХраненияСУБД();
		ЗаполнитьОбъектыМетаданных();
		СортировкаОбъектовМетаданных();
	КонецЕсли;

	ИнициализироватьСписокОбъектов();
	УстановитьВидимостьДоступность();
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ЗаписатьОперациюБизнесСтатистики("ОткрытиеОсновнойФормы");

	УдалитьЭлементыСписка(Истина);

	Если ВыборЗначения Тогда
		Элементы.Список.ТекущаяСтрока = ТекущийОбъект;

		Если Элементы.Найти("СписокВыбрать") <> Неопределено Тогда
			Элементы["СписокВыбрать"].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "РедакторДанных_ИзменениеНастроек" Тогда
		Если Параметр = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ПослеИзмененияНастроек(Параметр);
	КонецЕсли;

	Если ИмяСобытия = "РедакторДанных_ИзменениеДополнительныхСвойств" Тогда
		ДополнительныеСвойства.Очистить();

		Для Каждого СтрокаСвойств Из Параметр Цикл
			НовоеСвойство = ДополнительныеСвойства.Добавить();
			НовоеСвойство.Ключ = СтрокаСвойств.Ключ;
			НовоеСвойство.Значение = СтрокаСвойств.Значение;
			НовоеСвойство.Пометка = СтрокаСвойств.Пометка;
		КонецЦикла;
	КонецЕсли;

	Если ИмяСобытия = "РедакторДанных_ЗакрытиеФормыОбъекта" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыМетаданных

&НаКлиенте
Процедура ОбъектыМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаМетаданных = ОбъектыМетаданных.НайтиПоИдентификатору(ВыбраннаяСтрока);

	Если СтрокаМетаданных.ПолучитьРодителя() = Неопределено Тогда
		// Выбран уровень группы
		Если Элемент.Развернут(ВыбраннаяСтрока) Тогда
			Элемент.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элемент.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ГруппаМетаданных = "Константы" Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("АдресСтруктурыХраненияБазы", АдресСтруктурыХраненияБазы);
		ПараметрыФормы.Вставить("КоличествоОтображаемыхРеквизитов", КоличествоОтображаемыхРеквизитов);
		ПараметрыФормы.Вставить("ОтображатьСтруктуруСУБД", ОтображатьСтруктуруСУБД);
		ПараметрыФормы.Вставить("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
		ПараметрыФормы.Вставить("ДополнительныеСвойства", УпаковатьДополнительныеСвойства());
		ПараметрыФормы.Вставить("ВыбранныйРежимЗаписиДокумента", ВыбранныйРежимЗаписиДокумента);
		ПараметрыФормы.Вставить("ОтображатьСиноним", ОтображатьСиноним);
		ПараметрыФормы.Вставить("ГруппаМетаданных", ТекущиеДанные.ГруппаМетаданных);
		ПараметрыФормы.Вставить("ИмяОбъекта", ТекущиеДанные.Имя);
		ПараметрыФормы.Вставить("ПрефиксЗапроса", ТекущиеДанные.ПрефиксЗапроса);
		ПараметрыФормы.Вставить("ТекущийОбъект", ТекущиеДанные.Имя);

		ОткрытьФормуРедактора("РедакторОбъекта", ПараметрыФормы, ЭтотОбъект, ТекущиеДанные.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыМетаданныхПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьСписка(Ложь);

	Интервал = 0.1;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработатьВыборМетаданного", Интервал, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ОбработатьВыборОбъекта(СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОбработатьВыборОбъекта();

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	Если Элементы.Список.ТекущаяСтрока = Неопределено Или ВыборЗначения Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаОбъектаМетаданных <> Элементы.ОбъектыМетаданных.ТекущаяСтрока Тогда
		Элементы.ОбъектыМетаданных.ТекущаяСтрока = СтрокаОбъектаМетаданных;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьОПрограмме(Команда)

	ОткрытьФормуРедактора("ОПрограмме", Неопределено, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ТекстЗапроса(Команда)

	ВыбранныйОбъект = Неопределено;

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	Если ГруппаМетаданных = "Константы" И ЗначениеЗаполнено(ИмяОбъекта) Тогда
		ВыбранныйОбъект = ИмяОбъекта;

	ИначеЕсли ГруппаМетаданных <> "Константы" И ТекущиеДанные <> Неопределено Тогда
		ВыбранныйОбъект = Элементы.Список.ТекущаяСтрока;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыбранныйОбъект) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строку'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ГруппаМетаданных", ГруппаМетаданных);
	ПараметрыФормы.Вставить("ПрефиксЗапроса", ПрефиксЗапроса);
	ПараметрыФормы.Вставить("ИмяОбъекта", ИмяОбъекта);
	ПараметрыФормы.Вставить("ТекущийОбъект", ВыбранныйОбъект);
	ПараметрыФормы.Вставить("АдресСтруктурыХраненияБазы", АдресСтруктурыХраненияБазы);

	ОткрытьФормуРедактора("ГенераторТекстаЗапроса", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
	ПараметрыФормы.Вставить("ОтображатьСиноним", ОтображатьСиноним);
	ПараметрыФормы.Вставить("ОтображатьСтруктуруСУБД", ОтображатьСтруктуруСУБД);
	ПараметрыФормы.Вставить("КоличествоОтображаемыхРеквизитов", КоличествоОтображаемыхРеквизитов);

	ОткрытьФормуРедактора("НастройкиРедактора", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Элементы.Список.ТекущаяСтрока = Неопределено
		Или ГруппаМетаданных = "Константы" Тогда

		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строку'"));
		Возврат;
	КонецЕсли;

	ПоказатьЗначение(, Элементы.Список.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбъект(Команда)

	ОбработатьВыборОбъекта();

КонецПроцедуры

&НаКлиенте
Процедура ВыборОбъекта(Команда)

	ОбработатьВыборОбъекта();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбъект(Команда)

	ОбработатьСозданиеНового();

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОбъект(Команда)

	ОбработатьСозданиеНового(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылке(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПослеВводаСсылки", ЭтотОбъект);
	// BSLLS:Typo-off
	ПоказатьВводСтроки(ОписаниеОповещения, , НСтр("ru = 'Введите UUID или навигационную ссылку'"));
	// BSLLS:Typo-on

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьОбъекты(Команда)

	Для Каждого СтрокаОбъекта Из ОбъектыМетаданных.ПолучитьЭлементы() Цикл
		Элементы.ОбъектыМетаданных.Развернуть(СтрокаОбъекта.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьОбъекты(Команда)

	Для Каждого СтрокаОбъекта Из ОбъектыМетаданных.ПолучитьЭлементы() Цикл
		Элементы.ОбъектыМетаданных.Свернуть(СтрокаОбъекта.ПолучитьИдентификатор());
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписок(Команда)

	Если ГруппаМетаданных = "ПланыОбмена" Тогда
		ОбъектМетаданных = "ПланОбмена";

	ИначеЕсли ГруппаМетаданных = "Константы" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Формы списка для константы не существует.'"));
		Возврат;

	ИначеЕсли ГруппаМетаданных = "Справочники" Тогда
		ОбъектМетаданных = "Справочник";

	ИначеЕсли ГруппаМетаданных = "Документы" Тогда
		ОбъектМетаданных = "Документ";

	ИначеЕсли ГруппаМетаданных = "ПланыВидовХарактеристик" Тогда
		ОбъектМетаданных = "ПланВидовХарактеристик";

	ИначеЕсли ГруппаМетаданных = "РегистрыСведений" Тогда
		ОбъектМетаданных = "РегистрСведений";

	ИначеЕсли ГруппаМетаданных = "БизнесПроцессы" Тогда
		ОбъектМетаданных = "БизнесПроцесс";

	ИначеЕсли ГруппаМетаданных = "Задачи" Тогда
		ОбъектМетаданных = "Задача";
	КонецЕсли;

	НаименованиеФормы = СтрШаблон("%1.%2.ФормаСписка", ОбъектМетаданных, ИмяОбъекта);

	ОткрытьФорму(НаименованиеФормы);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьНепосредственно(Команда)

	Если Элементы.Список.ТекущиеДанные = Неопределено Или Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строку'"));
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ПослеОтветаНаВопросОФизическомУдалении",
		ЭтотОбъект);

	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите удалить элемент непосредственно
						|без контроля ссылочной целостности базы данных?'");

	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьВыделенные(Команда)

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	МодульПоискИУдалениеДублейКлиент = Вычислить("ПоискИУдалениеДублейКлиент");

	МодульПоискИУдалениеДублейКлиент.ОбъединитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВыделенные(Команда)

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	МодульПоискИУдалениеДублейКлиент = Вычислить("ПоискИУдалениеДублейКлиент");

	МодульПоискИУдалениеДублейКлиент.ЗаменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМестаИспользования(Команда)

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	МодульПоискИУдалениеДублейКлиент = Вычислить("ПоискИУдалениеДублейКлиент");

	МодульПоискИУдалениеДублейКлиент.ПоказатьМестаИспользования(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	МодульГрупповоеИзменениеОбъектовКлиент = Вычислить("ГрупповоеИзменениеОбъектовКлиент");

	МодульГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список, Список);

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументы(Команда)

	Если Не ГруппаМетаданных = "Документы" Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строку'"));
		Возврат;
	КонецЕсли;

	ИмяФормыСвязанныеДокументы = "СвязанныеДокументы";

	ОткрытьФорму("ОбщаяФорма." + ИмяФормыСвязанныеДокументы,
		Новый Структура("ОбъектОтбора", ТекущиеДанные.Ссылка),
		ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОбъектыМетаданных()

	ОбъектыМетаданных.ПолучитьЭлементы().Очистить();

	Если ОтображатьСтруктуруСУБД Тогда
		СтруктураХраненияБазы = ПолучитьИзВременногоХранилища(АдресСтруктурыХраненияБазы);
	Иначе
		СтруктураХраненияБазы = Неопределено;
	КонецЕсли;

	Для Каждого ТекущаяГруппа Из РеквизитФормыВЗначение("Объект").ГруппыМетаданных() Цикл
		Если Метаданные[ТекущаяГруппа.Имя].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		УзелГруппы = ОбъектыМетаданных.ПолучитьЭлементы().Добавить();
		УзелГруппы.Имя = ТекущаяГруппа.Имя;
		УзелГруппы.Синоним = ТекущаяГруппа.Представление;
		УзелГруппы.ИндексКартинки = ТекущаяГруппа.ИндексКартинки;

		Для Каждого ОбъектМетаданных Из Метаданные[ТекущаяГруппа.Имя] Цикл
			ПолноеИмяМетаданного = "" + ТекущаяГруппа.ПрефиксЗапроса + "." + ОбъектМетаданных.Имя;

			Если ОтображатьСтруктуруСУБД Тогда
				НайденныеСтроки = СтруктураХраненияБазы.НайтиСтроки(
					Новый Структура("ИмяТаблицы", ПолноеИмяМетаданного));
			КонецЕсли;

			УзелОбъекта = УзелГруппы.ПолучитьЭлементы().Добавить();
			УзелОбъекта.Имя = ОбъектМетаданных.Имя;
			УзелОбъекта.ГруппаМетаданных = ТекущаяГруппа.Имя;
			УзелОбъекта.ПрефиксЗапроса = ТекущаяГруппа.ПрефиксЗапроса;
			УзелОбъекта.ИндексКартинки = ТекущаяГруппа.ИндексКартинки;

			Если ОтображатьСтруктуруСУБД И НайденныеСтроки.Количество() Тогда
				УзелОбъекта.ИмяТаблицыСУБД = НайденныеСтроки[0].ИмяТаблицыХранения;
			КонецЕсли;

			Если ПустаяСтрока(ОбъектМетаданных.Синоним) Тогда
				УзелОбъекта.Синоним = ОбъектМетаданных.Имя;
			Иначе
				УзелОбъекта.Синоним = ОбъектМетаданных.Синоним;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокОбъектов()

	УдалитьЭлементыСписка();

	СформироватьСписокПолей();

	Список.ТекстЗапроса = ТекстЗапросаСписка();

	Если ПустаяСтрока(ИмяОбъекта) Или ПрефиксЗапроса = "Константа" Тогда
		Список.ОсновнаяТаблица = "";

	Иначе
		Если ПрефиксЗапроса = "РегистрБухгалтерии" Тогда
			ИмяТаблицы = ИмяОбъекта + ".ДвиженияССубконто";
		Иначе
			ИмяТаблицы = ИмяОбъекта;
		КонецЕсли;

		Список.ОсновнаяТаблица = ПрефиксЗапроса + "." + ИмяТаблицы;
	КонецЕсли;

	ДобавитьЭлементыСписка();

	Элементы.Список.ПутьКДаннымКартинкиСтроки = "Список.СтандартнаяКартинка";

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, Имя, Синоним, Вес)

	НоваяСтрока = ТаблицаПолей.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Синоним = Синоним;
	НоваяСтрока.Вес = Вес;

КонецПроцедуры

&НаСервере
Функция ДобавлятьПоле(МетаданноеПоле)

	Если МетаданноеПоле.Тип = Новый ОписаниеТипов("ХранилищеЗначения")
		Или МетаданноеПоле.Тип = Новый ОписаниеТипов("УникальныйИдентификатор")
		Или МетаданноеПоле.РежимПароля Тогда

		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Процедура СформироватьСписокПолей()

	ОсталосьПолей = КоличествоОтображаемыхРеквизитов;

	ТаблицаПолей = Новый ТаблицаЗначений();
	ТаблицаПолей.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаПолей.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	ТаблицаПолей.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));

	ДобавитьПолеСсылка = Ложь;

	Если Не ПустаяСтрока(ИмяОбъекта) Тогда
		МетаданныеОбъекта = Метаданные[ГруппаМетаданных][ИмяОбъекта];

		Если ПрефиксЗапроса = "РегистрСведений" Или ПрефиксЗапроса = "РегистрНакопления"
			Или ПрефиксЗапроса = "РегистрРасчета" Тогда

			СформироватьСписокПолейРегистра(ТаблицаПолей, МетаданныеОбъекта);

		ИначеЕсли ПрефиксЗапроса = "РегистрБухгалтерии" Тогда
			СформироватьСписокПолейРегистраБухгалтерии(ТаблицаПолей, МетаданныеОбъекта);

		ИначеЕсли ПрефиксЗапроса = "Справочник" Или ПрефиксЗапроса = "Документ" Тогда
			СформироватьСписокПолейСправочникаДокумента(ТаблицаПолей, МетаданныеОбъекта);
			ДобавитьПолеСсылка = Истина;

		Иначе
			ДобавитьПолеСсылка = Истина;
		КонецЕсли;

	Иначе
		ДобавитьПолеСсылка = Истина;
	КонецЕсли;

	Если КоличествоОтображаемыхРеквизитов = 0 Тогда
		ОсталосьПолей = 10000;
	Иначе
		ОсталосьПолей = ?(ДобавитьПолеСсылка, КоличествоОтображаемыхРеквизитов - 1, КоличествоОтображаемыхРеквизитов);
	КонецЕсли;

	ТаблицаПолей.Сортировать("Вес Возр");

	Для Каждого ТекущаяСтрока Из ТаблицаПолей Цикл
		Если ОсталосьПолей = 0 Тогда
			Прервать;
		КонецЕсли;

		СписокПолей.Добавить(ТекущаяСтрока.Имя, ТекущаяСтрока.Синоним);
		ОсталосьПолей = ОсталосьПолей - 1;
	КонецЦикла;

	Если ДобавитьПолеСсылка Тогда
		СписокПолей.Добавить("Ссылка", НСтр("ru = 'Ссылка'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьСписокПолейРегистра(ТаблицаПолей, МетаданныеОбъекта)

	Для Каждого ТекущийРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Не ДобавлятьПоле(ТекущийРеквизит) Тогда
			Продолжить;
		КонецЕсли;

		Порядок = 1;
		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущийРеквизит.Имя, ТекущийРеквизит.Синоним, Порядок);
	КонецЦикла;

	Для Каждого ТекущееИзмерение Из МетаданныеОбъекта.Измерения Цикл
		Если Не ДобавлятьПоле(ТекущееИзмерение) Тогда
			Продолжить;
		КонецЕсли;

		Порядок = 2;
		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущееИзмерение.Имя, ТекущееИзмерение.Синоним, Порядок);
	КонецЦикла;

	Для Каждого ТекущийРесурс Из МетаданныеОбъекта.Ресурсы Цикл
		Если Не ДобавлятьПоле(ТекущийРесурс) Тогда
			Продолжить;
		КонецЕсли;

		Порядок = 3;
		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущийРесурс.Имя, ТекущийРесурс.Синоним, Порядок);
	КонецЦикла;

	Для Каждого ТекущийРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Не ДобавлятьПоле(ТекущийРеквизит) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущийРеквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			Порядок = 4;
		Иначе
			Порядок = 5;
		КонецЕсли;

		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущийРеквизит.Имя, ТекущийРеквизит.Синоним, Порядок);
	КонецЦикла;

	ВариантыИспользованияРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
	ВариантыАвтоИспользованияРеквизита = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита;
	ВариантыРазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита;

	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = ВариантыРазделениеДанных.Разделять Тогда
			Если Не ПараметрыСеанса[ОбщийРеквизит.ИспользованиеРазделенияДанных.Имя] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		НастройкаДляОбъекта = ОбщийРеквизит.Состав.Найти(МетаданныеОбъекта);

		Если НастройкаДляОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВыводитьРеквизит = Ложь;

		Если НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Использовать
			Или (НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Авто
			И ОбщийРеквизит.АвтоИспользование = ВариантыАвтоИспользованияРеквизита.Использовать) Тогда

			ВыводитьРеквизит = Истина;
		КонецЕсли;

		Если Не ВыводитьРеквизит Тогда
			Продолжить;
		КонецЕсли;

		Если Не ДобавлятьПоле(ОбщийРеквизит) Тогда
			Продолжить;
		КонецЕсли;

		Порядок = 6;
		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ОбщийРеквизит.Имя, ОбщийРеквизит.Синоним, Порядок);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьСписокПолейРегистраБухгалтерии(ТаблицаПолей, МетаданныеОбъекта)

	ИспользуетсяКорреспонденция = МетаданныеОбъекта.Корреспонденция;
	КоличествоСубконто = МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто;

	Порядок = 1;
	ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "Период", НСтр("ru = 'Период'"), Порядок);

	Порядок = 2;
	ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "Регистратор", НСтр("ru = 'Регистратор'"), Порядок);

	Порядок = 3;
	ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "НомерСтроки", НСтр("ru = 'Номер строки'"), Порядок);

	Порядок = 4;
	ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "Активность", НСтр("ru = 'Активность'"), Порядок);

	Если ИспользуетсяКорреспонденция Тогда
		Порядок = 5;
		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "СчетКт", НСтр("ru = 'Счет Кт'"), Порядок);

		Порядок = 6;
		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "СчетДт", НСтр("ru = 'Счет Дт'"), Порядок);

	Иначе
		Порядок = 5;
		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "Счет", НСтр("ru = 'Счет'"), Порядок);
	КонецЕсли;

	Счетчик = 1;
	Пока Счетчик <= КоличествоСубконто Цикл
		Если ИспользуетсяКорреспонденция Тогда
			Порядок = 7;
			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "СубконтоДт" + Счетчик,
				НСтр("ru = 'Субконто Кт'") + Счетчик, Порядок);

			Порядок = 8;
			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "ВидСубконтоДт" + Счетчик,
				НСтр("ru = 'Вид субконто Кт'") + Счетчик, Порядок);

			Порядок = 7;
			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "СубконтоКт" + Счетчик,
				НСтр("ru = 'Субконто Дт'") + Счетчик, Порядок);

			Порядок = 8;
			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "ВидСубконтоКт" + Счетчик,
				НСтр("ru = 'Вид субконто Дт'") + Счетчик, Порядок);

		Иначе
			Порядок = 7;
			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "Субконто" + Счетчик,
				НСтр("ru = 'Субконто'") + Счетчик, Порядок);

			Порядок = 8;
			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, "ВидСубконто" + Счетчик,
				НСтр("ru = 'Вид субконто'") + Счетчик, Порядок);
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Для Каждого ТекущееИзмерение Из МетаданныеОбъекта.Измерения Цикл
		Если ИспользуетсяКорреспонденция И Не ТекущееИзмерение.Балансовый Тогда
			Порядок = 9;

			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущееИзмерение.Имя + "Дт",
				ТекущееИзмерение.Синоним + " Дт", Порядок);

			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущееИзмерение.Имя + "Кт",
				ТекущееИзмерение.Синоним + " Кт", Порядок);

		Иначе
			Порядок = 9;
			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущееИзмерение.Имя, ТекущееИзмерение.Синоним, Порядок);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекущийРесурс Из МетаданныеОбъекта.Ресурсы Цикл
		Если ИспользуетсяКорреспонденция И Не ТекущийРесурс.Балансовый Тогда
			Порядок = 10;

			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущийРесурс.Имя + "Дт",
				ТекущийРесурс.Синоним + " Дт", Порядок);

			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущийРесурс.Имя + "Кт",
				ТекущийРесурс.Синоним + " Кт", Порядок);
		Иначе
			Порядок = 10;
			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущийРесурс.Имя, ТекущийРесурс.Синоним, Порядок);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекущийРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Не ДобавлятьПоле(ТекущийРеквизит) Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущийРеквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			Порядок = 11;
		Иначе
			Порядок = 12;
		КонецЕсли;

		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ТекущийРеквизит.Имя, ТекущийРеквизит.Синоним, Порядок);
	КонецЦикла;

	ВариантыИспользованияРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
	ВариантыАвтоИспользованияРеквизита = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита;
	ВариантыРазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита;

	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = ВариантыРазделениеДанных.Разделять Тогда
			Если Не ПараметрыСеанса[ОбщийРеквизит.ИспользованиеРазделенияДанных.Имя] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		НастройкаДляОбъекта = ОбщийРеквизит.Состав.Найти(МетаданныеОбъекта);

		Если НастройкаДляОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВыводитьРеквизит = Ложь;

		Если НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Использовать
			Или (НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Авто
			И ОбщийРеквизит.АвтоИспользование = ВариантыАвтоИспользованияРеквизита.Использовать) Тогда

			ВыводитьРеквизит = Истина;
		КонецЕсли;

		Если Не ВыводитьРеквизит Тогда
			Продолжить;
		КонецЕсли;

		Если Не ДобавлятьПоле(ОбщийРеквизит) Тогда
			Продолжить;
		КонецЕсли;

		Порядок = 13;
		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ОбщийРеквизит.Имя, ОбщийРеквизит.Синоним, Порядок);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьСписокПолейСправочникаДокумента(ТаблицаПолей, МетаданныеОбъекта)

	ДлинаКода = 0;
	ДлинаНомера = 0;
	ДлинаНаименования = 0;
	МетаданныеОбъекта = Метаданные[ГруппаМетаданных][ИмяОбъекта];

	Если ПрефиксЗапроса = "Справочник" Тогда
		ДлинаКода = МетаданныеОбъекта.ДлинаКода;
		ДлинаНаименования = МетаданныеОбъекта.ДлинаНаименования;
	ИначеЕсли ПрефиксЗапроса = "Документ" Тогда
		ДлинаНомера = МетаданныеОбъекта.ДлинаНомера;
	КонецЕсли;

	Для Каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = "Код" И ДлинаКода > 0
			Или СтандартныйРеквизит.Имя = "Номер" И ДлинаНомера > 0
			Или СтандартныйРеквизит.Имя = "Наименование" И ДлинаНаименования > 0
			Или СтандартныйРеквизит.Имя = "Дата" Тогда

			Если Не ДобавлятьПоле(СтандартныйРеквизит) Тогда
				Продолжить;
			КонецЕсли;

			Порядок = 1;
			ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, СтандартныйРеквизит.Имя,
				СтандартныйРеквизит.Синоним, Порядок);

		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Не ДобавлятьПоле(Реквизит) Тогда
			Продолжить;
		КонецЕсли;

		Если Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			Порядок = 2;
		Иначе
			Порядок = 3;
		КонецЕсли;

		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, Реквизит.Имя, Реквизит.Синоним, Порядок);
	КонецЦикла;

	ВариантыИспользованияРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
	ВариантыАвтоИспользованияРеквизита = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита;
	ВариантыРазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита;

	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = ВариантыРазделениеДанных.Разделять Тогда
			Если Не ПараметрыСеанса[ОбщийРеквизит.ИспользованиеРазделенияДанных.Имя] Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		НастройкаДляОбъекта = ОбщийРеквизит.Состав.Найти(МетаданныеОбъекта);

		Если НастройкаДляОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВыводитьРеквизит = Ложь;

		Если НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Использовать
			Или (НастройкаДляОбъекта.Использование = ВариантыИспользованияРеквизита.Авто
			И ОбщийРеквизит.АвтоИспользование = ВариантыАвтоИспользованияРеквизита.Использовать) Тогда

			ВыводитьРеквизит = Истина;
		КонецЕсли;

		Если Не ВыводитьРеквизит Тогда
			Продолжить;
		КонецЕсли;

		Если Не ДобавлятьПоле(ОбщийРеквизит) Тогда
			Продолжить;
		КонецЕсли;

		Порядок = 4;
		ДобавитьСтрокуТаблицыПолей(ТаблицаПолей, ОбщийРеквизит.Имя, ОбщийРеквизит.Синоним, Порядок);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСписка()

	Если СписокПолей.Количество() = 0 Или ПустаяСтрока(ИмяОбъекта) Тогда
		ТекстЗапроса = "ВЫБРАТЬ НЕОПРЕДЕЛЕНО КАК Ссылка, 0 КАК СтандартнаяКартинка ГДЕ ЛОЖЬ";

	ИначеЕсли ПрефиксЗапроса = "Константа" Тогда
		ТекстЗапроса = "ВЫБРАТЬ ""ЭтоКонстанта"" КАК Ссылка, 0 КАК СтандартнаяКартинка";

	Иначе
		ТекстЗапроса = "ВЫБРАТЬ";

		Для Каждого ПолеВыборки Из СписокПолей Цикл
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб
				+ "Т." + ПолеВыборки.Значение + " КАК " + ПолеВыборки.Значение;

			Если СписокПолей.Индекс(ПолеВыборки) <> СписокПолей.Количество() - 1 Тогда
				ТекстЗапроса = ТекстЗапроса + ",";
			КонецЕсли;
		КонецЦикла;

		Если ПрефиксЗапроса = "РегистрБухгалтерии" Тогда
			ИмяТаблицы = ИмяОбъекта + ".ДвиженияССубконто";
		Иначе
			ИмяТаблицы = ИмяОбъекта;
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ
		|	" + ПрефиксЗапроса + "." + ИмяТаблицы + " КАК Т";

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Процедура ДобавитьЭлементыСписка()

	Для Каждого ПолеВыборки Из СписокПолей Цикл
		ИмяЭлемента = "Список" + ПолеВыборки.Значение;
		ЭлементСписка = Элементы.Добавить(
			ИмяЭлемента,
			Тип("ПолеФормы"),
			Элементы.Список);

		ЭлементСписка.Вид = ВидПоляФормы.ПолеНадписи;

		// Тип реквизита может быть "недоступен в данных формы"
		Попытка
			ЭлементСписка.ПутьКДанным = "Список." + ПолеВыборки.Значение;
		Исключение
			ЭлементСписка.Видимость = Ложь;
			Продолжить;
		КонецПопытки;

		Если ОтображатьСиноним Тогда
			ЗаголовокЭлемента = ПолеВыборки.Представление;
		Иначе
			ЗаголовокЭлемента = ПолеВыборки.Значение;
		КонецЕсли;

		ИзменитьЗаголовокПоляСписка(ИмяЭлемента, ЗаголовокЭлемента);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыСписка(Знач ТолькоПользовательскиеНастройки = Ложь)

	Если Не ТолькоПользовательскиеНастройки Тогда
		ПереченьДляУдаления = Новый Массив();
		Для Каждого Элемент Из Элементы.Список.ПодчиненныеЭлементы Цикл
			ПереченьДляУдаления.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из ПереченьДляУдаления Цикл
			Элементы.Удалить(Элемент);
		КонецЦикла;

		СписокПолей.Очистить();
	КонецЕсли;

	НастройкиКомпоновщика = Список.КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройкиКомпоновщика = Список.КомпоновщикНастроек.ПользовательскиеНастройки;

	ИдентификаторНастройки = НастройкиКомпоновщика.Отбор.ИдентификаторПользовательскойНастройки;
	ЭлементыОтбора = ПользовательскиеНастройкиКомпоновщика.Элементы.Найти(ИдентификаторНастройки).Элементы;
	ЭлементыОтбора.Очистить();

	ИдентификаторНастройки = НастройкиКомпоновщика.УсловноеОформление.ИдентификаторПользовательскойНастройки;
	ЭлементыОформления = ПользовательскиеНастройкиКомпоновщика.Элементы.Найти(ИдентификаторНастройки).Элементы;
	ЭлементыОформления.Очистить();

	ИдентификаторНастройки = НастройкиКомпоновщика.Структура.ИдентификаторПользовательскойНастройки;
	ЭлементыСтруктуры = ПользовательскиеНастройкиКомпоновщика.Элементы.Найти(ИдентификаторНастройки).Структура;
	ЭлементыСтруктуры.Очистить();

	ИдентификаторНастройки = НастройкиКомпоновщика.Порядок.ИдентификаторПользовательскойНастройки;
	ЭлементыСортировки = ПользовательскиеНастройкиКомпоновщика.Элементы.Найти(ИдентификаторНастройки).Элементы;
	ЭлементыСортировки.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияНастроек(РезультатЗакрытия)

	Если РезультатЗакрытия.Свойство("ЗаписьВРежимеОбмена") Тогда
		// BSLLS:UnusedLocalVariable-off
		ЗаписьВРежимеОбмена = РезультатЗакрытия.ЗаписьВРежимеОбмена;
		// BSLLS:UnusedLocalVariable-on
	КонецЕсли;

	Если РезультатЗакрытия.Свойство("ОтображатьСиноним") Тогда
		// BSLLS:UnusedLocalVariable-off
		ОтображатьСиноним = РезультатЗакрытия.ОтображатьСиноним;
		// BSLLS:UnusedLocalVariable-on
	КонецЕсли;

	Если РезультатЗакрытия.Свойство("ОтображатьСтруктуруСУБД") Тогда
		// BSLLS:UnusedLocalVariable-off
		ОтображатьСтруктуруСУБД = РезультатЗакрытия.ОтображатьСтруктуруСУБД;
		// BSLLS:UnusedLocalVariable-on
	КонецЕсли;

	Если РезультатЗакрытия.Свойство("КоличествоОтображаемыхРеквизитов") Тогда
		// BSLLS:UnusedLocalVariable-off
		КоличествоОтображаемыхРеквизитов = РезультатЗакрытия.КоличествоОтображаемыхРеквизитов;
		// BSLLS:UnusedLocalVariable-on
		ИнициализироватьСписокОбъектов();
	КонецЕсли;

	Если ОтображатьСтруктуруСУБД Тогда
		ИнициализироватьСтруктуруХраненияСУБД();
		Оповестить("РедакторДанных_СтруктураХраненияСУБДИнициализирована", АдресСтруктурыХраненияБазы, ЭтотОбъект);
	КонецЕсли;

	УстановитьВидимостьДоступность();
	СортировкаОбъектовМетаданных();

КонецПроцедуры

&НаСервере
Процедура СортировкаОбъектовМетаданных()

	ОбъектыМетаданныхДерево = РеквизитФормыВЗначение("ОбъектыМетаданных");

	Если ОтображатьСиноним Тогда
		КолонкаСортировки = "Синоним";
	Иначе
		КолонкаСортировки = "Имя";
	КонецЕсли;

	Для Каждого ГруппаМетаданныхДерево Из ОбъектыМетаданныхДерево.Строки Цикл
		СписокМетаданныхДерево = ГруппаМетаданныхДерево.Строки;
		ИндексГруппыМетаданных = ОбъектыМетаданныхДерево.Строки.Индекс(ГруппаМетаданныхДерево);
		СписокМетаданныхФорма = ОбъектыМетаданных.ПолучитьЭлементы().Получить(ИндексГруппыМетаданных).ПолучитьЭлементы();

		СоответствияМетаданных = Новый Соответствие;

		Для Каждого ЭлементМетаданныхФормы Из СписокМетаданныхФорма Цикл
			ПредставлениеМетаданного = ЭлементМетаданныхФормы[КолонкаСортировки];

			СоответствиеМетаданных = СоответствияМетаданных.Получить(ПредставлениеМетаданного);
			Если СоответствиеМетаданных = Неопределено Тогда
				СоответствияМетаданных.Вставить(ПредставлениеМетаданного, ЭлементМетаданныхФормы);
			КонецЕсли;
		КонецЦикла;

		СписокМетаданныхДерево.Сортировать(КолонкаСортировки);

		Для Каждого ЭлементМетаданныхДерево Из СписокМетаданныхДерево Цикл
			ЭлементМетаданныхФормы = СоответствияМетаданных.Получить(ЭлементМетаданныхДерево[КолонкаСортировки]);

			Если ЭлементМетаданныхФормы <> Неопределено Тогда
				ТекущийИндекс = СписокМетаданныхФорма.Индекс(ЭлементМетаданныхФормы);
				НовыйИндекс = СписокМетаданныхДерево.Индекс(ЭлементМетаданныхДерево);

				ШагСдвига = НовыйИндекс - ТекущийИндекс;

				Если ШагСдвига <> 0 Тогда
					СписокМетаданныхФорма.Сдвинуть(ТекущийИндекс, ШагСдвига);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()

	Если ОтображатьСиноним Тогда
		Элементы.ОбъектыМетаданныхСиноним.Видимость = Истина;
		Элементы.ОбъектыМетаданныхИмя.Видимость = Ложь;
	Иначе
		Элементы.ОбъектыМетаданныхСиноним.Видимость = Ложь;
		Элементы.ОбъектыМетаданныхИмя.Видимость = Истина;
	КонецЕсли;

	Для Каждого ПолеВыборки Из СписокПолей Цикл
		ИмяЭлемента = "Список" + ПолеВыборки.Значение;
		Если ОтображатьСиноним Тогда
			ЗаголовокЭлемента = ПолеВыборки.Представление;
		Иначе
			ЗаголовокЭлемента = ПолеВыборки.Значение;
		КонецЕсли;
		ИзменитьЗаголовокПоляСписка(ИмяЭлемента, ЗаголовокЭлемента);
	КонецЦикла;

	Элементы.ОбъектыМетаданныхИмяТаблицыСУБД.Видимость = ОтображатьСтруктуруСУБД;
	Элементы.СписокТекстЗапроса.Видимость = ОтображатьСтруктуруСУБД;

	Для Каждого СтандартнаяКомандаСписка Из Элементы.СписокСтандартныеКоманды.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(СтандартнаяКомандаСписка) = Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;

		СтандартнаяКомандаСписка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КонецЦикла;

	МассивОтображаемыхЭлементов = Новый Массив();
	МассивОтображаемыхЭлементов.Добавить("СписокУстановитьПометкуУдаления");
	МассивОтображаемыхЭлементов.Добавить("СписокОбновить");
	МассивОтображаемыхЭлементов.Добавить("СписокПроведение");
	МассивОтображаемыхЭлементов.Добавить("СписокПровести");
	МассивОтображаемыхЭлементов.Добавить("СписокОтменаПроведения");
	МассивОтображаемыхЭлементов.Добавить("СписокРежимПросмотра");
	МассивОтображаемыхЭлементов.Добавить("СписокДерево");
	МассивОтображаемыхЭлементов.Добавить("СписокИерархическийСписок");
	МассивОтображаемыхЭлементов.Добавить("СписокСписок");

	Для Каждого ИмяЭлемента Из МассивОтображаемыхЭлементов Цикл
		ЭлементФормы = Элементы.Найти(ИмяЭлемента);

		Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
			ЭлементФормы.Отображение = ОтображениеКнопки.Картинка;
			ЭлементФормы.ПоложениеВКоманднойПанели =
				ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю;
		ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") И ЭлементФормы.Вид = ВидГруппыФормы.Подменю Тогда
			ЭлементФормы.Отображение = ОтображениеКнопки.Картинка;
		КонецЕсли;
	КонецЦикла;

	Если ПрефиксЗапроса <> "Константа" И ПрефиксЗапроса <> "" И Не ВыборЗначения Тогда
		Элементы.СписокОткрытьОбъект.Видимость = Истина;
		Элементы.СписокКонтекстноеМенюОткрытьОбъект.Видимость = Истина;
	Иначе
		Элементы.СписокОткрытьОбъект.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюОткрытьОбъект.Видимость = Ложь;
	КонецЕсли;

	Если ПустаяСтрока(ПрефиксЗапроса) Тогда
		Элементы.СписокИзменитьОбъект.Доступность = Ложь;
		Элементы.СписокИзменитьОбъект.Доступность = Ложь;
	Иначе
		Элементы.СписокИзменитьОбъект.Доступность = Истина;
		Элементы.СписокИзменитьОбъект.Доступность = Истина;
	КонецЕсли;

	Если ВыборЗначения Тогда
		Элементы.СписокИзменитьОбъект.Видимость = Ложь;
		Элементы.СписокОткрытьОбъект.Видимость = Ложь;
		Элементы.СписокОткрытьНастройки.Видимость = Ложь;
		Элементы.СписокСправка.Видимость = Ложь;
		Элементы.СписокНастройкаСписка.Видимость = Ложь;
		Элементы.СписокОткрытьОПрограмме.Видимость = Ложь;
	КонецЕсли;

	Если Не ВыборЗначения И ОтображатьКомандыНепосредственногоУдаления(ГруппаМетаданных) Тогда
		Элементы.СписокУдалитьНепосредственно.Видимость = Истина;
		Элементы.СписокКонтекстноеМенюУдалитьНепосредственно.Видимость = Истина;
	Иначе
		Элементы.СписокУдалитьНепосредственно.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюУдалитьНепосредственно.Видимость = Ложь;
	КонецЕсли;

	Если Не ВыборЗначения И ОтображатьКомандыПоискИУдалениеДублей(ГруппаМетаданных) Тогда
		Элементы.СписокОбъединитьВыделенные.Видимость = Истина;
		Элементы.СписокЗаменитьВыделенные.Видимость = Истина;
		Элементы.СписокПоказатьМестаИспользования.Видимость = Истина;
		Элементы.СписокКонтекстноеМенюОбъединитьВыделенные.Видимость = Истина;
		Элементы.СписокКонтекстноеМенюЗаменитьВыделенные.Видимость = Истина;
		Элементы.СписокКонтекстноеМенюПоказатьМестаИспользования.Видимость = Истина;
	Иначе
		Элементы.СписокОбъединитьВыделенные.Видимость = Ложь;
		Элементы.СписокЗаменитьВыделенные.Видимость = Ложь;
		Элементы.СписокПоказатьМестаИспользования.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюОбъединитьВыделенные.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюЗаменитьВыделенные.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюПоказатьМестаИспользования.Видимость = Ложь;
	КонецЕсли;

	Если Не ВыборЗначения И ОтображатьКомандуГрупповоеИзменениеОбъектов(ГруппаМетаданных, ИмяОбъекта) Тогда
		Элементы.СписокИзменитьВыделенные.Видимость = Истина;
		Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = Истина;
	Иначе
		Элементы.СписокИзменитьВыделенные.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = Ложь;
	КонецЕсли;

	Если Не ВыборЗначения И ОтображатьКомандуСвязанныеДокументы(ГруппаМетаданных) Тогда
		Элементы.СписокСвязанныеДокументы.Видимость = Истина;
	Иначе
		Элементы.СписокСвязанныеДокументы.Видимость = Ложь;
	КонецЕсли;

	Если Не ВыборЗначения И ОтображатьКомандыСозданияКопирования(ГруппаМетаданных, ИмяОбъекта) Тогда
		Элементы.СписокСоздатьОбъект.Видимость = Истина;
		Элементы.СписокСкопироватьОбъект.Видимость = Истина;
	Иначе
		Элементы.СписокСоздатьОбъект.Видимость = Ложь;
		Элементы.СписокСкопироватьОбъект.Видимость = Ложь;
	КонецЕсли;

	Элементы.СписокИзменитьОбъект.КнопкаПоУмолчанию = Не ВыборЗначения;
	Элементы.СписокВыборОбъекта.Видимость = ВыборЗначения;
	Элементы.СписокВыборОбъекта.КнопкаПоУмолчанию = ВыборЗначения;
	Элементы.ОбъектыМетаданных.Видимость = Не ВыборЗначения;

КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаголовокПоляСписка(ИмяЭлемента, ЗаголовокЭлемента)
	ЭлементСписка = Элементы[ИмяЭлемента];
	ЭлементСписка.Заголовок = ЗаголовокЭлемента;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруХраненияСУБД()

	Если ОтображатьСтруктуруСУБД И ПустаяСтрока(АдресСтруктурыХраненияБазы) Тогда
		АдресСтруктурыХраненияБазы = ПоместитьВоВременноеХранилище(
			ПолучитьСтруктуруХраненияБазыДанных(, Истина),
			УникальныйИдентификатор);

		ЗаполнитьОбъектыМетаданных();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыборМетаданного() Экспорт

	УстановитьДоступностьСписка(Истина);

	Если СтрокаОбъектаМетаданных = Элементы.ОбъектыМетаданных.ТекущаяСтрока
		Или Элементы.ОбъектыМетаданных.ТекущаяСтрока = Неопределено Тогда

		Возврат;
	КонецЕсли;

	СтрокаОбъектаМетаданных = Элементы.ОбъектыМетаданных.ТекущаяСтрока;

	ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;

	// BSLLS:UnusedLocalVariable-off
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ПрефиксЗапроса = ТекущиеДанные.ПрефиксЗапроса;
		ИмяОбъекта = ТекущиеДанные.Имя;
		ГруппаМетаданных = ТекущиеДанные.ГруппаМетаданных;

	Иначе
		ПрефиксЗапроса = "";
		ИмяОбъекта = "";
		ГруппаМетаданных = "";
	КонецЕсли;
	// BSLLS:UnusedLocalVariable-on

	ИнициализироватьСписокОбъектов();

	Элементы.ОбъектыМетаданных.ТекущаяСтрока = СтрокаОбъектаМетаданных;

	Если Элементы.Список.ТекущиеДанные <> Неопределено И ПрефиксЗапроса <> "Константа" И ПрефиксЗапроса <> "" Тогда
		Элементы.СписокИзменить.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюИзменить.Видимость = Ложь;
	КонецЕсли;

	УстановитьВидимостьДоступность();

	Если Элементы.Список.РежимВыбора И ЗначениеЗаполнено(ТекущийОбъект) Тогда
		Элементы.Список.ТекущаяСтрока = ТекущийОбъект;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВводаСсылки(ВведенныйТекст, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(ВведенныйТекст) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыНовогоОбъекта = ПолучитьПараметрыОбъектаПоСсылке(ВведенныйТекст);

	Если ПараметрыНовогоОбъекта = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Введено некорректное значение.
								|Поддерживается ввод навигационных ссылок и UUID.'");
		Сообщение.Сообщить();

	Иначе
		ПараметрыНовогоОбъекта.Вставить("АдресСтруктурыХраненияБазы", АдресСтруктурыХраненияБазы);
		ПараметрыНовогоОбъекта.Вставить("КоличествоОтображаемыхРеквизитов", КоличествоОтображаемыхРеквизитов);
		ПараметрыНовогоОбъекта.Вставить("ОтображатьСтруктуруСУБД", ОтображатьСтруктуруСУБД);
		ПараметрыНовогоОбъекта.Вставить("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
		ПараметрыНовогоОбъекта.Вставить("ОтображатьСиноним", ОтображатьСиноним);
		ПараметрыНовогоОбъекта.Вставить("ДополнительныеСвойства", УпаковатьДополнительныеСвойства());
		ПараметрыНовогоОбъекта.Вставить("ВыбранныйРежимЗаписиДокумента", ВыбранныйРежимЗаписиДокумента);

		ОткрытьФормуРедактора(
			"РедакторОбъекта",
			ПараметрыНовогоОбъекта,
			ЭтотОбъект,
			ПараметрыНовогоОбъекта.ТекущийОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбъектаПоСсылке(Знач ВведенныйТекст)

	// В навигационной ссылке содержится UUID объекта, но порядок символьных блоков изменен.
	// Необходимо собрать UUID в правильном порядке.
	// Пример:
	//   e1cib/data/Документ.АвансовыйОтчет?ref=9d4f20cf30c960b711e1fca9487835dd
	//   487835dd-fca9-11e1-9d4f-20cf30c960b7

	ПозицияУказателя = СтрНайти(ВведенныйТекст, "?ref=");

	// BSLLS:MagicNumber-off
	Если ПозицияУказателя <> 0
		ИЛИ (СтрДлина(ВведенныйТекст) = 32 И СтрЧислоВхождений(ВведенныйТекст, "-") = 0) Тогда

		Указатель = ?(ПозицияУказателя <> 0, Сред(ВведенныйТекст, ПозицияУказателя + 5), ВведенныйТекст);

		СтрокаUUID = Сред(Указатель, 25, 8)
		             + "-" + Сред(Указатель, 21, 4)
		             + "-" + Сред(Указатель, 17, 4)
		             + "-" + Сред(Указатель, 1, 4)
		             + "-" + Сред(Указатель, 5, 12);

		ВведенныйUUID = Новый УникальныйИдентификатор(СтрокаUUID);
	ИначеЕсли СтрДлина(ВведенныйТекст) = 36 И СтрЧислоВхождений(ВведенныйТекст, "-") = 4 Тогда
		ВведенныйUUID = Новый УникальныйИдентификатор(ВведенныйТекст);
	КонецЕсли;
	// BSLLS:MagicNumber-on

	Если Не ЗначениеЗаполнено(ВведенныйUUID) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыНовогоОбъекта = Новый Структура();
	ТекущаяСсылка = Неопределено;

	Для Каждого ЭлементГруппыМетаданных Из РеквизитФормыВЗначение("Объект").ГруппыМетаданных() Цикл
		Если ЭлементГруппыМетаданных.МенеджерОбъектов = Константы Тогда
			Продолжить;
		КонецЕсли;

		Для Каждого ОбъектМетаданных Из ЭлементГруппыМетаданных.МенеджерОбъектов Цикл
			Попытка
				ТекущаяСсылка = ОбъектМетаданных.ПолучитьСсылку(ВведенныйUUID);

				Если ТекущаяСсылка.ПолучитьОбъект() = Неопределено Тогда
					ТекущаяСсылка = Неопределено;
					Продолжить;
				Иначе
					ПараметрыНовогоОбъекта.Вставить("ГруппаМетаданных", ЭлементГруппыМетаданных.Имя);
					ПараметрыНовогоОбъекта.Вставить("ПрефиксЗапроса", ЭлементГруппыМетаданных.ПрефиксЗапроса);
					ПараметрыНовогоОбъекта.Вставить("ИмяОбъекта", ТекущаяСсылка.Метаданные().Имя);
					ПараметрыНовогоОбъекта.Вставить("ТекущийОбъект", ТекущаяСсылка);
					Прервать;
				КонецЕсли;

			Исключение
				ТекущаяСсылка = Неопределено;
				Продолжить;
			КонецПопытки;
		КонецЦикла;

		Если ТекущаяСсылка <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ТекущаяСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ПараметрыНовогоОбъекта;

КонецФункции

&НаКлиенте
Процедура ОбработатьВыборОбъекта(СтандартнаяОбработка = Неопределено)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строку'"));
		Возврат;
	КонецЕсли;

	Если Элементы.Список.РежимВыбора Тогда
		// BSLLS:UnusedLocalVariable-off
		ЗакрыватьПриВыборе = Истина;
		// BSLLS:UnusedLocalVariable-on

		ОповеститьОВыборе(Элементы.Список.ТекущаяСтрока);

		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресСтруктурыХраненияБазы", АдресСтруктурыХраненияБазы);
	ПараметрыФормы.Вставить("КоличествоОтображаемыхРеквизитов", КоличествоОтображаемыхРеквизитов);
	ПараметрыФормы.Вставить("ОтображатьСтруктуруСУБД", ОтображатьСтруктуруСУБД);
	ПараметрыФормы.Вставить("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
	ПараметрыФормы.Вставить("ОтображатьСиноним", ОтображатьСиноним);
	ПараметрыФормы.Вставить("ДополнительныеСвойства", УпаковатьДополнительныеСвойства());
	ПараметрыФормы.Вставить("ВыбранныйРежимЗаписиДокумента", ВыбранныйРежимЗаписиДокумента);
	ПараметрыФормы.Вставить("ГруппаМетаданных", ГруппаМетаданных);
	ПараметрыФормы.Вставить("ИмяОбъекта", ИмяОбъекта);
	ПараметрыФормы.Вставить("ПрефиксЗапроса", ПрефиксЗапроса);

	Если ПрефиксЗапроса = "Константа" Тогда
		ПараметрыФормы.Вставить("ТекущийОбъект", ИмяОбъекта);
		УникальностьФормыРедактора = ИмяОбъекта;
	ИначеЕсли ТекущиеДанные.Свойство("Регистратор") Тогда
		ПараметрыФормы.Вставить("НачальнаяТаблица", ИмяОбъекта);
		ПараметрыФормы.Вставить("ТекущийОбъект", ТекущиеДанные.Регистратор);

		ПараметрыРегистратора = ПолучитьСтруктуруПараметровОбъекта(ТекущиеДанные.Регистратор);
		ПараметрыФормы.ИмяОбъекта = ПараметрыРегистратора.ИмяОбъекта;
		ПараметрыФормы.ПрефиксЗапроса = ПараметрыРегистратора.ПрефиксЗапроса;
		ПараметрыФормы.ГруппаМетаданных = ПараметрыРегистратора.ГруппаМетаданных;
		УникальностьФормыРедактора = ТекущиеДанные.Регистратор;
	Иначе
		ПараметрыФормы.Вставить("ТекущийОбъект", Элементы.Список.ТекущаяСтрока);
		УникальностьФормыРедактора = Элементы.Список.ТекущаяСтрока;
	КонецЕсли;

	ОткрытьФормуРедактора("РедакторОбъекта", ПараметрыФормы, ЭтотОбъект, УникальностьФормыРедактора);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеНового(РежимКопирования = Ложь)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если РежимКопирования И (ТекущиеДанные = Неопределено Или Элементы.Список.ТекущаяСтрока = Неопределено) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить строку'"));
		Возврат;
	КонецЕсли;

	Если ПрефиксЗапроса = "Константа" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Создание нового не поддерживается для констант'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресСтруктурыХраненияБазы", АдресСтруктурыХраненияБазы);
	ПараметрыФормы.Вставить("КоличествоОтображаемыхРеквизитов", КоличествоОтображаемыхРеквизитов);
	ПараметрыФормы.Вставить("ОтображатьСтруктуруСУБД", ОтображатьСтруктуруСУБД);
	ПараметрыФормы.Вставить("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
	ПараметрыФормы.Вставить("ОтображатьСиноним", ОтображатьСиноним);
	ПараметрыФормы.Вставить("ДополнительныеСвойства", УпаковатьДополнительныеСвойства());
	ПараметрыФормы.Вставить("ВыбранныйРежимЗаписиДокумента", ВыбранныйРежимЗаписиДокумента);
	ПараметрыФормы.Вставить("ГруппаМетаданных", ГруппаМетаданных);
	ПараметрыФормы.Вставить("ИмяОбъекта", ИмяОбъекта);
	ПараметрыФормы.Вставить("ПрефиксЗапроса", ПрефиксЗапроса);

	СсылкаНового = ПолучитьСсылкуНового(ГруппаМетаданных, ИмяОбъекта);

	ПараметрыФормы.Вставить("ТекущийОбъект", СсылкаНового);
	УникальностьФормыРедактора = СсылкаНового;

	Если РежимКопирования Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.Список.ТекущаяСтрока);
	КонецЕсли;

	ОткрытьФормуРедактора("РедакторОбъекта", ПараметрыФормы, ЭтотОбъект, УникальностьФормыРедактора);

КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНового(Знач ГруппаМетаданных, Знач ИмяОбъекта)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МенеджерОбъекта = ОбработкаОбъект.ПолучитьМенеджерОбъекта(ГруппаМетаданных, ИмяОбъекта);

	Если ГруппаМетаданных = "РегистрыСведений" Тогда
		СсылкаНового = МенеджерОбъекта.ПустойКлюч();
	Иначе
		СсылкаНового = МенеджерОбъекта.ПолучитьСсылку();
	КонецЕсли;

	Возврат СсылкаНового;

КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПараметровОбъекта(Знач ТекущийОбъект)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураПараметров = ОбработкаОбъект.ПолучитьСтруктуруПараметров(ТекущийОбъект);

	Возврат СтруктураПараметров;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	Список.УсловноеОформление.Элементы.Очистить();

	НовыйЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	НовыйЭлементУО.Использование = Истина;

	ОформляемыеПоля = НовыйЭлементУО.Поля.Элементы.Добавить();
	ОформляемыеПоля.Поле = Новый ПолеКомпоновкиДанных("Ссылка");

	ЭлементОтбор = НовыйЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбор.ПравоеЗначение = "ЭтоКонстанта";

	НовыйЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серебряный);

	НовыйЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Нажмите, чтобы просмотреть значение'"));

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОтветаНаВопросОФизическомУдалении(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	// BSLLS:UsingServiceTag-off
	//@skip-check unknown-method-property
	// BSLLS:UsingServiceTag-on
	УдалитьНепосредственноНаСервере(Элементы.Список.ТекущаяСтрока);

	Элементы.Список.Обновить();

КонецПроцедуры

&НаСервере
Процедура УдалитьНепосредственноНаСервере(Знач УдаляемыйОбъект)

	// BSLLS:SetPrivilegedMode-off
	УстановитьПривилегированныйРежим(Истина);
	// BSLLS:SetPrivilegedMode-on

	Если ГруппаМетаданных <> "РегистрыСведений"
		И ГруппаМетаданных <> "Константы" Тогда
		УдаляемыйОбъект.ПолучитьОбъект().Удалить();
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтображатьКомандыНепосредственногоУдаления(ГруппаМетаданных)

	Если ГруппаМетаданных = "Справочники"
		Или ГруппаМетаданных = "Документы"
		Или ГруппаМетаданных = "БизнесПроцессы"
		Или ГруппаМетаданных = "Задачи"
		Или ГруппаМетаданных = "ПланыСчетов"
		Или ГруппаМетаданных = "ПланыОбмена"
		Или ГруппаМетаданных = "ПланыВидовХарактеристик"
		Или ГруппаМетаданных = "ПланыВидовРасчета" Тогда

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ОтображатьКомандыПоискИУдалениеДублей(ГруппаМетаданных)

	Если Метаданные.ОбщиеМодули.Найти("ПоискИУдалениеДублейКлиент") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ГруппаМетаданных = "Справочники"
		Или ГруппаМетаданных = "Документы"
		Или ГруппаМетаданных = "БизнесПроцессы"
		Или ГруппаМетаданных = "Задачи"
		Или ГруппаМетаданных = "ПланыСчетов"
		Или ГруппаМетаданных = "ПланыОбмена"
		Или ГруппаМетаданных = "ПланыВидовХарактеристик"
		Или ГруппаМетаданных = "ПланыВидовРасчета" Тогда

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ОтображатьКомандуГрупповоеИзменениеОбъектов(ГруппаМетаданных, ИмяОбъекта)

	Если Метаданные.ОбщиеМодули.Найти("ГрупповоеИзменениеОбъектовКлиент") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ГруппаМетаданных = "Справочники"
		Или ГруппаМетаданных = "Документы"
		Или ГруппаМетаданных = "БизнесПроцессы"
		Или ГруппаМетаданных = "Задачи"
		Или ГруппаМетаданных = "ПланыСчетов"
		Или ГруппаМетаданных = "ПланыОбмена"
		Или ГруппаМетаданных = "ПланыВидовХарактеристик"
		Или ГруппаМетаданных = "ПланыВидовРасчета" Тогда

		МожноРедактировать = ПравоДоступа("Редактирование", Метаданные[ГруппаМетаданных][ИмяОбъекта]);

		Если МожноРедактировать Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ОтображатьКомандуСвязанныеДокументы(ГруппаМетаданных)

	Если Метаданные.ОбщиеФормы.Найти("СвязанныеДокументы") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы["СвязанныеДокументы"]) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ГруппаМетаданных = "Документы" Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ОтображатьКомандыСозданияКопирования(ГруппаМетаданных, ИмяОбъекта)

	Если ГруппаМетаданных = "Справочники"
		Или ГруппаМетаданных = "Документы"
		Или ГруппаМетаданных = "БизнесПроцессы"
		Или ГруппаМетаданных = "Задачи"
		Или ГруппаМетаданных = "ПланыСчетов"
		Или ГруппаМетаданных = "ПланыОбмена"
		Или ГруппаМетаданных = "ПланыВидовХарактеристик"
		Или ГруппаМетаданных = "ПланыВидовРасчета" Тогда

		Возврат Истина;

	ИначеЕсли ГруппаМетаданных = "РегистрыСведений" Тогда
		МенеджерМетаданных = Метаданные[ГруппаМетаданных][ИмяОбъекта];
		ПериодичностьРегистратор = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора;

		Если Не МенеджерМетаданных.ПериодичностьРегистраСведений = ПериодичностьРегистратор Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактора(ИмяФормы, Параметры, Владелец, Уникальность = Неопределено,
	ОписаниеОповещенияОЗакрытии = Неопределено)

	ПолныйПутьКФорме = ПолныйПутьКФормеНаСервере(ИмяФормы);

	ОткрытьФорму(
		ПолныйПутьКФорме,
		Параметры,
		Владелец,
		Уникальность, , ,
		ОписаниеОповещенияОЗакрытии);

КонецПроцедуры

&НаСервере
Функция ПолныйПутьКФормеНаСервере(Знач ИмяФормы)

	Возврат РеквизитФормыВЗначение("Объект").ПолныйПутьКФормеНаСервере(ИмяФормы);

КонецФункции

&НаСервере
Функция КлючОбъектаНастроек()
	Возврат "РедакторДанных";
КонецФункции

&НаСервере
Функция КлючНастроек()
	Возврат "ОсновныеНастройки";
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()

	Настройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъектаНастроек(), КлючНастроек());

	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Если Настройки.Свойство("ЗаписьВРежимеОбмена") Тогда
			// BSLLS:UnusedLocalVariable-off
			ЗаписьВРежимеОбмена = Настройки.ЗаписьВРежимеОбмена;
			// BSLLS:UnusedLocalVariable-on
		КонецЕсли;

		Если Настройки.Свойство("КоличествоОтображаемыхРеквизитов") Тогда
			// BSLLS:UnusedLocalVariable-off
			КоличествоОтображаемыхРеквизитов = Настройки.КоличествоОтображаемыхРеквизитов;
			// BSLLS:UnusedLocalVariable-on
		Иначе
			// BSLLS:UnusedLocalVariable-off
			КоличествоОтображаемыхРеквизитов = 10;
			// BSLLS:UnusedLocalVariable-on
		КонецЕсли;

		Если Настройки.Свойство("ОтображатьСиноним") Тогда
			// BSLLS:UnusedLocalVariable-off
			ОтображатьСиноним = Настройки.ОтображатьСиноним;
			// BSLLS:UnusedLocalVariable-on
		КонецЕсли;

		Если Настройки.Свойство("ОтображатьСтруктуруСУБД") Тогда
			// BSLLS:UnusedLocalVariable-off
			ОтображатьСтруктуруСУБД = Настройки.ОтображатьСтруктуруСУБД;
			// BSLLS:UnusedLocalVariable-on
		КонецЕсли;

		Если Настройки.Свойство("ДополнительныеСвойства") Тогда
			ДополнительныеСвойства.Очистить();

			Для Каждого СтрокаСвойств Из Настройки.ДополнительныеСвойства Цикл
				НовоеСвойство = ДополнительныеСвойства.Добавить();
				НовоеСвойство.Ключ = СтрокаСвойств.Ключ;
				НовоеСвойство.Значение = СтрокаСвойств.Значение;
			КонецЦикла;
		КонецЕсли;

	Иначе
		КоличествоОтображаемыхРеквизитов = 10;
	КонецЕсли;

	// BSLLS:UnusedLocalVariable-off
	ВыбранныйРежимЗаписиДокумента = "Запись";
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	Если ВыборЗначения Тогда
		Возврат;
	КонецЕсли;

	Настройки = Новый Структура();

	Настройки.Вставить("ЗаписьВРежимеОбмена", ЗаписьВРежимеОбмена);
	Настройки.Вставить("КоличествоОтображаемыхРеквизитов", КоличествоОтображаемыхРеквизитов);
	Настройки.Вставить("ОтображатьСиноним", ОтображатьСиноним);
	Настройки.Вставить("ОтображатьСтруктуруСУБД", ОтображатьСтруктуруСУБД);
	Настройки.Вставить("ДополнительныеСвойства", Новый Массив());

	Для Каждого СтрокаСвойств Из ДополнительныеСвойства Цикл
		НовоеСвойство = Новый Структура();
		НовоеСвойство.Вставить("Ключ", СтрокаСвойств.Ключ);
		НовоеСвойство.Вставить("Значение", СтрокаСвойств.Значение);
		Настройки.ДополнительныеСвойства.Добавить(НовоеСвойство);
	КонецЦикла;

	ХранилищеОбщихНастроек.Сохранить(КлючОбъектаНастроек(), КлючНастроек(), Настройки);

КонецПроцедуры

&НаКлиенте
Функция УпаковатьДополнительныеСвойства()

	Результат = Новый Массив();

	Для Каждого СтрокаСвойств Из ДополнительныеСвойства Цикл
		НовоеСвойство = Новый Структура();
		НовоеСвойство.Вставить("Ключ", СтрокаСвойств.Ключ);
		НовоеСвойство.Вставить("Значение", СтрокаСвойств.Значение);
		НовоеСвойство.Вставить("Пометка", СтрокаСвойств.Пометка);
		Результат.Добавить(НовоеСвойство);
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьСписка(ЗначениеДоступности)

	Для Каждого ПодчиненныйЭлемент Из Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент = Элементы.СтрокаПоискаСписок Тогда
			Продолжить;
		КонецЕсли;

		ПодчиненныйЭлемент.Доступность = ЗначениеДоступности;
	КонецЦикла;

	Элементы.Список.КонтекстноеМеню.Доступность = ЗначениеДоступности;

	Для Каждого ПодчиненныйЭлемент Из Элементы.Список.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Доступность = ЗначениеДоступности;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОперациюБизнесСтатистики(Знач ИмяОперации, Знач Значение = 1, Знач Комментарий = "")

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение, Комментарий);

КонецПроцедуры

#КонецОбласти