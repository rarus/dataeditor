///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2024, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Свойство("АдресХранилища", АдресХранилища);

	ДанныеВХранилище = ПолучитьИзВременногоХранилища(АдресХранилища);

	ТипыВХранилище = Новый Массив();
	ТипыВХранилище.Добавить(ТипЗнч(ДанныеВХранилище));

	// BSLLS:UnusedLocalVariable-off
	ТипДанных = Новый ОписаниеТипов(ТипыВХранилище);
	// BSLLS:UnusedLocalVariable-on

	УстановитьВидимостьДоступность();

	ПодготовитьФормуКВводу();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляСтруктуры

&НаКлиенте
Процедура ПоляСтруктурыПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбработатьИзменениеУникальногоИдентификатора(
		ТекущиеДанные.Значение,
		Элемент.Имя,
		"Значение",
		ТекущиеДанные.ПолучитьИдентификатор(),
		Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПоляСтруктурыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ПроверитьКорректностьСтруктурыНаСервере(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПоляСтруктурыЗначениеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПоляСтруктуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.Тип = ПредставлениеТипаРеквизита(ТекущиеДанные.Значение);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОчиститьХранилище(Команда)

	// BSLLS:UnusedLocalVariable-off
	ТипДанных = Новый ОписаниеТипов();
	// BSLLS:UnusedLocalVariable-on

	УстановитьВидимостьДоступность();
	ПодготовитьФормуКВводу();

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

&НаКлиенте
Процедура СохранитьХранилище(Команда)

	Если Модифицированность Тогда
		СохранитьХранилищеНаСервере();
	КонецЕсли;

	Закрыть("(" + Строка(ТипДанныхВХранилище()) + ")");

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДвоичныеДанные(Команда)

	ОповещениеПомещениеФайлаЗавершено = Новый ОписаниеОповещения("Подключаемый_ПомещениеФайлаЗавершено", ЭтотОбъект);
	ОповещениеОХодеПомещенияФайла = Новый ОписаниеОповещения("Подключаемый_ХодПомещенияФайла", ЭтотОбъект);

	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(НСтр("ru = 'Двоичные данные'"), Ложь);

	НачатьПомещениеФайлаНаСервер(
		ОповещениеПомещениеФайлаЗавершено,
		ОповещениеОХодеПомещенияФайла, ,
		АдресДвоичныхДанных,
		ПараметрыДиалога,
		УникальныйИдентификатор);

	Элементы.ФормаСохранитьХранилище.Доступность = Ложь;
	Элементы.ФормаОчиститьХранилище.Доступность = Ложь;
	Элементы.ЗагрузитьДвоичныеДанные.Доступность = Ложь;
	Элементы.СохранитьДвоичныеДанные.Доступность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДвоичныеДанные(Команда)

	Если ПустаяСтрока(АдресДвоичныхДанных) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Нет данных для сохранения'"));
		Возврат;
	КонецЕсли;

	ПараметрыДиалогаПолученияФайлов = Новый ПараметрыДиалогаПолученияФайлов(НСтр("ru = 'Двоичные данные'"), Ложь);

	НачатьПолучениеФайлаССервера(АдресДвоичныхДанных, , ПараметрыДиалогаПолученияФайлов);

КонецПроцедуры

&НаКлиенте
Процедура Инициализация_Структура(Команда)

	// BSLLS:UnusedLocalVariable-off
	ТипДанных = Новый ОписаниеТипов("Структура");
	// BSLLS:UnusedLocalVariable-on

	УстановитьВидимостьДоступность();
	ПодготовитьФормуКВводу();

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

&НаКлиенте
Процедура Инициализация_Соответствие(Команда)

	// BSLLS:UnusedLocalVariable-off
	ТипДанных = Новый ОписаниеТипов("Соответствие");
	// BSLLS:UnusedLocalVariable-on

	УстановитьВидимостьДоступность();
	ПодготовитьФормуКВводу();

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

&НаКлиенте
Процедура Инициализация_Массив(Команда)

	// BSLLS:UnusedLocalVariable-off
	ТипДанных = Новый ОписаниеТипов("Массив");
	// BSLLS:UnusedLocalVariable-on

	УстановитьВидимостьДоступность();
	ПодготовитьФормуКВводу();

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

&НаКлиенте
Процедура Инициализация_ДвоичныеДанные(Команда)

	// BSLLS:UnusedLocalVariable-off
	ТипДанных = Новый ОписаниеТипов("ДвоичныеДанные");
	// BSLLS:UnusedLocalVariable-on

	УстановитьВидимостьДоступность();
	ПодготовитьФормуКВводу();

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ТипДанныхВХранилище()

	ТипДанныхВХранилище = Тип("Неопределено");

	Если ТипДанных.Типы().Количество() Тогда
		ТипДанныхВХранилище = ТипДанных.Типы().Получить(0);
	КонецЕсли;

	Возврат ТипДанныхВХранилище;

КонецФункции

&НаСервере
Процедура ПодготовитьФормуКВводу()

	ТипДанныхВХранилище = ТипДанныхВХранилище();

	ПоляСтруктуры.ПолучитьЭлементы().Очистить();

	Если Не ПустаяСтрока(АдресДвоичныхДанных) Тогда
		УдалитьИзВременногоХранилища(АдресДвоичныхДанных);
		АдресДвоичныхДанных = "";
	КонецЕсли;

	ДанныеВХранилище = ПолучитьИзВременногоХранилища(АдресХранилища);

	Если ДанныеВХранилище = Неопределено Или ТипЗнч(ДанныеВХранилище) <> ТипДанныхВХранилище Тогда
		Возврат;
	КонецЕсли;

	Если ТипДанныхВХранилище = Тип("Структура") Или ТипДанныхВХранилище = Тип("Соответствие") Тогда
		ВывестиПоляСтруктуры(ДанныеВХранилище, ПоляСтруктуры);

	ИначеЕсли ТипДанныхВХранилище = Тип("Массив") Тогда
		ВывестиПоляМассива(ДанныеВХранилище, ПоляСтруктуры);

	ИначеЕсли ТипДанныхВХранилище = Тип("ДвоичныеДанные") Тогда
		АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеВХранилище);

	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиПоляСтруктуры(ДанныеСтруктуры, КорневойЭлемент)

	Для Каждого ТекущееПоле Из ДанныеСтруктуры Цикл
		ДобавитьПолеКоллекцииВДерево(ТекущееПоле.Ключ, ТекущееПоле.Значение, КорневойЭлемент);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВывестиПоляМассива(ДанныеМассива, КорневойЭлемент)

	Для Сч = 0 По ДанныеМассива.ВГраница() Цикл
		ДобавитьПолеКоллекцииВДерево(Формат(Сч, "ЧН=0; ЧГ=0;"), ДанныеМассива[Сч], КорневойЭлемент);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПолеКоллекцииВДерево(ТекущийКлюч, ТекущееЗначение, КорневойЭлемент)

	НовоеПоле = КорневойЭлемент.ПолучитьЭлементы().Добавить();
	НовоеПоле.Ключ = ТекущийКлюч;
	НовоеПоле.Тип = ПредставлениеТипаРеквизита(ТекущееЗначение);

	Если ТипЗнч(ТекущееЗначение) = Тип("Структура") Тогда
		НовоеПоле.Значение = Новый ОписаниеТипов("Структура");
		ВывестиПоляСтруктуры(ТекущееЗначение, НовоеПоле);

	ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Соответствие") Тогда
		НовоеПоле.Значение = Новый ОписаниеТипов("Соответствие");
		ВывестиПоляСтруктуры(ТекущееЗначение, НовоеПоле);

	ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Массив") Тогда
		НовоеПоле.Значение = Новый ОписаниеТипов("Массив");
		ВывестиПоляМассива(ТекущееЗначение, НовоеПоле);

	Иначе
		НовоеПоле.Значение = ТекущееЗначение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СобратьСтруктуруИзПолей(НовыеДанные, КорневойЭлемент)

	Для Каждого ТекущееПоле Из КорневойЭлемент.ПолучитьЭлементы() Цикл
		Если ТипЗнч(ТекущееПоле.Значение) = Тип("ОписаниеТипов") Тогда
			Если ТекущееПоле.Значение.Типы()[0] = Тип("Структура") Тогда
				НовыеДанные.Вставить(ТекущееПоле.Ключ, Новый Структура());
				СобратьСтруктуруИзПолей(НовыеДанные[ТекущееПоле.Ключ], ТекущееПоле);

			ИначеЕсли ТекущееПоле.Значение.Типы()[0] = Тип("Соответствие") Тогда
				НовыеДанные.Вставить(ТекущееПоле.Ключ, Новый Соответствие());
				СобратьСтруктуруИзПолей(НовыеДанные[ТекущееПоле.Ключ], ТекущееПоле);

			ИначеЕсли ТекущееПоле.Значение.Типы()[0] = Тип("Массив") Тогда
				НовыеДанные.Вставить(ТекущееПоле.Ключ, Новый Массив());
				СобратьМассивИзПолей(НовыеДанные[ТекущееПоле.Ключ], ТекущееПоле);

			Иначе
				ВызватьИсключение НСтр("ru = 'Тип данных в структуре не поддерживается в текущей версии программы'");
			КонецЕсли;

		Иначе
			НовыеДанные.Вставить(ТекущееПоле.Ключ, ТекущееПоле.Значение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СобратьМассивИзПолей(НовыеДанные, КорневойЭлемент)

	Для Каждого ТекущееПоле Из КорневойЭлемент.ПолучитьЭлементы() Цикл
		Если ТипЗнч(ТекущееПоле.Значение) = Тип("ОписаниеТипов") Тогда
			Если ТекущееПоле.Значение.Типы()[0] = Тип("Структура") Тогда
				НовыеДанные.Добавить(Новый Структура());
				СобратьСтруктуруИзПолей(НовыеДанные[НовыеДанные.ВГраница()], ТекущееПоле);

			ИначеЕсли ТекущееПоле.Значение.Типы()[0] = Тип("Соответствие") Тогда
				НовыеДанные.Добавить(Новый Соответствие());
				СобратьСтруктуруИзПолей(НовыеДанные[НовыеДанные.ВГраница()], ТекущееПоле);

			ИначеЕсли ТекущееПоле.Значение.Типы()[0] = Тип("Массив") Тогда
				НовыеДанные.Добавить(Новый Массив());
				СобратьМассивИзПолей(НовыеДанные[НовыеДанные.ВГраница()], ТекущееПоле);

			Иначе
				ВызватьИсключение НСтр("ru = 'Тип данных в структуре не поддерживается в текущей версии программы'");
			КонецЕсли;

		Иначе
			НовыеДанные.Добавить(ТекущееПоле.Значение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СохранитьХранилищеНаСервере()

	НовыеДанные = Неопределено;

	ТипДанныхВХранилище = ТипДанныхВХранилище();

	Если ТипДанныхВХранилище = Тип("Структура") Тогда
		НовыеДанные = Новый Структура();
		СобратьСтруктуруИзПолей(НовыеДанные, ПоляСтруктуры);

	ИначеЕсли ТипДанныхВХранилище = Тип("Соответствие") Тогда
		НовыеДанные = Новый Соответствие();
		СобратьСтруктуруИзПолей(НовыеДанные, ПоляСтруктуры);

	ИначеЕсли ТипДанныхВХранилище = Тип("Массив") Тогда
		НовыеДанные = Новый Массив();
		СобратьМассивИзПолей(НовыеДанные, ПоляСтруктуры);

	ИначеЕсли ТипДанныхВХранилище = Тип("ДвоичныеДанные") Тогда
		Если ПустаяСтрока(АдресДвоичныхДанных) Тогда
			НовыеДанные = Неопределено;
		Иначе
			НовыеДанные = ПолучитьИзВременногоХранилища(АдресДвоичныхДанных);
		КонецЕсли;

	Иначе
		Возврат;
	КонецЕсли;

	ПоместитьВоВременноеХранилище(НовыеДанные, АдресХранилища);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()

	ТипДанныхВХранилище = ТипДанныхВХранилище();

	Если ТипДанныхВХранилище = Тип("Структура")
		Или ТипДанныхВХранилище = Тип("Соответствие")
		Или ТипДанныхВХранилище = Тип("Массив") Тогда

		Элементы.РежимыХранилища.ТекущаяСтраница = Элементы.РежимСтруктура;

	ИначеЕсли ТипДанныхВХранилище = Тип("ДвоичныеДанные") Тогда
		Элементы.РежимыХранилища.ТекущаяСтраница = Элементы.РежимДвоичныеДанные;

	ИначеЕсли ТипДанныхВХранилище = Тип("Неопределено") Тогда
		Элементы.РежимыХранилища.ТекущаяСтраница = Элементы.РежимПустоеХранилище;

	Иначе
		Элементы.РежимыХранилища.ТекущаяСтраница = Элементы.РежимНеПоддерживается;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПомещениеФайлаЗавершено(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт

	Элементы.ФормаСохранитьХранилище.Доступность = Истина;
	Элементы.ФормаОчиститьХранилище.Доступность = Истина;
	Элементы.ЗагрузитьДвоичныеДанные.Доступность = Истина;
	Элементы.СохранитьДвоичныеДанные.Доступность = Истина;

	Если ОписаниеПомещенногоФайла = Неопределено Или ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		Возврат;
	КонецЕсли;

	// BSLLS:UnusedLocalVariable-off
	АдресДвоичныхДанных = ОписаниеПомещенногоФайла.Адрес;
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ХодПомещенияФайла(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла,
	ДополнительныеПараметры) Экспорт

	Состояние(НСтр("ru = 'Загрузка файла'"), Помещено, ПомещаемыйФайл.Имя, БиблиотекаКартинок.Информация);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУникальногоИдентификатора(ТекущееЗначение, ИмяТаблицы, ИмяКолонки,
	ИдентификаторСтроки, Отказ)

	Если Не ТипЗнч(ТекущееЗначение) = Тип("УникальныйИдентификатор") Тогда
		Возврат;
	КонецЕсли;

	Отказ = Истина;

	ПараметрыФормы = Новый Структура("ТекущееЗначение", ТекущееЗначение);

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	ДополнительныеПараметры.Вставить("ИмяКолонки", ИмяКолонки);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);

	Оповещение = Новый ОписаниеОповещения(
		"Подключаемый_ПослеИзмененияИдентификатора",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ОткрытьФормуРедактора("РедакторИдентификатора", ПараметрыФормы, ЭтотОбъект, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеИзмененияИдентификатора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяТаблица = ЭтотОбъект[ДополнительныеПараметры.ИмяТаблицы];
	ТекущаяСтрока = ТекущаяТаблица.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока[ДополнительныеПараметры.ИмяКолонки] = РезультатЗакрытия;

	// BSLLS:UnusedLocalVariable-off
	Модифицированность = Истина;
	// BSLLS:UnusedLocalVariable-on

КонецПроцедуры

&НаСервере
Процедура ПроверитьКорректностьСтруктурыНаСервере(Отказ)

	Попытка
		ТипДанныхВХранилище = ТипДанныхВХранилище();

		Если ТипДанныхВХранилище = Тип("Структура") Тогда
			НовыеДанные = Новый Структура();
			СобратьСтруктуруИзПолей(НовыеДанные, ПоляСтруктуры);

		ИначеЕсли ТипДанныхВХранилище = Тип("Соответствие") Тогда
			НовыеДанные = Новый Соответствие();
			СобратьСтруктуруИзПолей(НовыеДанные, ПоляСтруктуры);

		ИначеЕсли ТипДанныхВХранилище = Тип("Массив") Тогда
			НовыеДанные = Новый Массив();
			СобратьМассивИзПолей(НовыеДанные, ПоляСтруктуры);
		КонецЕсли;

	Исключение
		Отказ = Истина;

		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = РеквизитФормыВЗначение("Объект").ПолучитьОписаниеВозникшейОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактора(ИмяФормы, Параметры, Владелец, ОписаниеОповещенияОЗакрытии)

	ПолныйПутьКФорме = ПолныйПутьКФормеНаСервере(ИмяФормы);

	ОткрытьФорму(
		ПолныйПутьКФорме,
		Параметры,
		Владелец, , , ,
		ОписаниеОповещенияОЗакрытии);

КонецПроцедуры

&НаСервере
Функция ПолныйПутьКФормеНаСервере(ИмяФормы)

	Возврат РеквизитФормыВЗначение("Объект").ПолныйПутьКФормеНаСервере(ИмяФормы);

КонецФункции

&НаСервере
Функция ПредставлениеТипаРеквизита(ЗначениеСвойства)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	ТипыЗначения = Новый Массив();
	ТипыЗначения.Добавить(ТипЗнч(ЗначениеСвойства));
	ОписаниеТипа = Новый ОписаниеТипов(ТипыЗначения);

	Возврат ОбработкаОбъект.ПредставлениеТипаРеквизита(ОписаниеТипа, ЗначениеСвойства);

КонецФункции

#КонецОбласти