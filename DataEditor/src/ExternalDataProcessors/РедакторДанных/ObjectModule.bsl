///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - сведения о внешней обработке.
//
Функция СведенияОВнешнейОбработке() Экспорт

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	МодульДополнительныеОтчетыИОбработки = Вычислить("ДополнительныеОтчетыИОбработки");

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	МодульДополнительныеОтчетыИОбработкиКлиентСервер = Вычислить("ДополнительныеОтчетыИОбработкиКлиентСервер");

	ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.3.1");
	ПараметрыРегистрации.Информация = НСтр("ru = 'Редактор данных'");
	ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = ВерсияОбработки();

	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'Редактор данных'");
	Команда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.Идентификатор = "РедакторДанных";

	Возврат ПараметрыРегистрации;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает версию обработки.
//
// Возвращаемое значение:
//  Строка - Версия обработки
//
Функция ВерсияОбработки() Экспорт
	Возврат "1.0.2.1";
КонецФункции

// Предназначена для выполнения произвольного кода
//
// Параметры:
//  ИсполняемыйКод - Строка - выполняемый код.
//  Объект - Произвольный - объект, выбранный в текущий момент в редакторе.
//  ТекстОшибки - Строка - возвращает текст ошибки при выполнении кода.
//
Процедура ВыполнитьПроизвольныйКод(ИсполняемыйКод, Объект, ТекстОшибки) Экспорт

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	Попытка
		Выполнить(ИсполняемыйКод);

	Исключение
		ТекстОшибки = ПолучитьОписаниеВозникшейОшибки(ИнформацияОбОшибке(), Истина);

		Позиция = СтрНайти(ТекстОшибки, "{<Неизвестный модуль>(");
		Если Позиция > 0 Тогда
			ТекстОшибки = Сред(ТекстОшибки, Позиция + 1);

			Позиция = СтрНайти(ТекстОшибки, ":");
			Если Позиция > 0 Тогда
				ТекстОшибки = Сред(ТекстОшибки, Позиция + 1);
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

// Функция возвращает список групп метаданных, обрабатываемых данным инструментом.
//
// Возвращаемое значение:
//   - Массив из см. ДобавитьГруппуМетаданных - список групп метаданных.
//
Функция ГруппыМетаданных() Экспорт

	ГруппыМетаданных = Новый Массив();

	ПиктограммыМетаданных = ПиктограммыМетаданных();

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "ПланыОбмена", ПланыОбмена,
		"ПланОбмена", НСтр("ru = 'Планы обмена'"), ПиктограммыМетаданных.ПланыОбмена);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "Константы", Константы,
		"Константа", НСтр("ru = 'Константы'"), ПиктограммыМетаданных.Константы);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "Справочники", Справочники,
		"Справочник", НСтр("ru = 'Справочники'"), ПиктограммыМетаданных.Справочники);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "Документы", Документы,
		"Документ", НСтр("ru = 'Документы'"), ПиктограммыМетаданных.Документы);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "ПланыВидовХарактеристик", ПланыВидовХарактеристик,
		"ПланВидовХарактеристик", НСтр("ru = 'Планы видов характеристик'"),
		ПиктограммыМетаданных.ПланыВидовХарактеристик);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "ПланыСчетов", ПланыСчетов,
		"ПланСчетов", НСтр("ru = 'Планы счетов'"), ПиктограммыМетаданных.ПланыСчетов);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "ПланыВидовРасчета", ПланыВидовРасчета,
		"ПланВидовРасчета", НСтр("ru = 'Планы видов расчета'"), ПиктограммыМетаданных.ПланыВидовРасчета);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "РегистрыСведений", РегистрыСведений,
		"РегистрСведений", НСтр("ru = 'Регистры сведений'"), ПиктограммыМетаданных.РегистрыСведений);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "РегистрыНакопления", РегистрыНакопления,
		"РегистрНакопления", НСтр("ru = 'Регистры накопления'"), ПиктограммыМетаданных.РегистрыНакопления);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "РегистрыБухгалтерии", РегистрыБухгалтерии,
		"РегистрБухгалтерии", НСтр("ru = 'Регистры бухгалтерии'"), ПиктограммыМетаданных.РегистрыБухгалтерии);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "РегистрыРасчета", РегистрыРасчета,
		"РегистрРасчета", НСтр("ru = 'Регистры расчета'"), ПиктограммыМетаданных.РегистрыРасчета);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "БизнесПроцессы", БизнесПроцессы,
		"БизнесПроцесс", НСтр("ru = 'Бизнес-процессы'"), ПиктограммыМетаданных.БизнесПроцессы);

	ДобавитьГруппуМетаданных(ГруппыМетаданных, "Задачи", Задачи,
		"Задача", НСтр("ru = 'Задачи'"), ПиктограммыМетаданных.Задачи);

	Возврат ГруппыМетаданных;

КонецФункции

// Добавить группу метаданных.
//
// Параметры:
//  ГруппыМетаданных - Массив из см. ДобавитьГруппуМетаданных - Группа метаданных.
//  Имя - Строка - Имя группы.
//  МенеджерОбъектов - ПланыОбменаМенеджер
//                   - КонстантыМенеджер
//                   - СправочникиМенеджер
//                   - ДокументыМенеджер
//                   - ПланыВидовХарактеристикМенеджер
//                   - ПланыСчетовМенеджер
//                   - ПланыВидовРасчетаМенеджер
//                   - РегистрыСведенийМенеджер
//                   - БизнесПроцессыМенеджер
//                   - ЗадачиМенеджер - Менеджер объектов.
//  ПрефиксЗапроса - Строка - Префикс запроса.
//  Представление - Строка - Представление группы.
//  ИндексКартинки - Число - Индекс картинки.
//
Процедура ДобавитьГруппуМетаданных(ГруппыМетаданных, Имя, МенеджерОбъектов, ПрефиксЗапроса, Представление,
	ИндексКартинки)

	ОписаниеГруппы = Новый Структура();

	ОписаниеГруппы.Вставить("Имя", Имя);
	ОписаниеГруппы.Вставить("МенеджерОбъектов", МенеджерОбъектов);
	ОписаниеГруппы.Вставить("ПрефиксЗапроса", ПрефиксЗапроса);
	ОписаниеГруппы.Вставить("Представление", Представление);
	ОписаниеГруппы.Вставить("ИндексКартинки", ИндексКартинки);

	ГруппыМетаданных.Добавить(ОписаниеГруппы);

КонецПроцедуры

// Получить описание возникшей ошибки.
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке - информация о возникшей ошибке.
//  ПодробноеПредставлениеОшибки - Булево - признак необходимости формирования подробного текста ошибки.
//
// Возвращаемое значение:
//  Строка - описание возникшей ошибки.
//
Функция ПолучитьОписаниеВозникшейОшибки(ИнформацияОбОшибке, ПодробноеПредставлениеОшибки = Ложь) Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация();

	Если СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.17.0") > 0 Тогда
		Если ПодробноеПредставлениеОшибки Тогда
			ВычисляемоеВыражение = "ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)";
		Иначе
			ВычисляемоеВыражение = "ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке)";
		КонецЕсли;

	Иначе
		Если ПодробноеПредставлениеОшибки Тогда
			ВычисляемоеВыражение = "ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)";
		Иначе
			ВычисляемоеВыражение = "КраткоеПредставлениеОшибки(ИнформацияОбОшибке)";
		КонецЕсли;
	КонецЕсли;

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	ОписаниеВозникшейОшибки = Вычислить(ВычисляемоеВыражение);

	Возврат ОписаниеВозникшейОшибки;

КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт

	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);

	ЧислоРазрядовВВерсии = 4;

	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> ЧислоРазрядовВВерсии Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неправильный формат параметра %1: %2'"),
			"СтрокаВерсии1",
			СтрокаВерсии1);
	КонецЕсли;

	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> ЧислоРазрядовВВерсии Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неправильный формат параметра %1: %2'"),
			"СтрокаВерсии2",
			СтрокаВерсии2);
	КонецЕсли;

	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает параметры по переданному объекту.
//
// Параметры:
//  Значение - ЛюбаяСсылка - Ссылка на объект, по которому необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - Получить структуру параметров:
// * ИмяОбъекта - Строка - имя объекта метаданных.
// * ПрефиксЗапроса - Строка - префикс объекта в запросе.
// * ГруппаМетаданных - Строка - имя группы метаданных.
//
Функция ПолучитьСтруктуруПараметров(Значение) Экспорт

	ГруппыМетаданных = ГруппыМетаданных();

	ТипМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Значение));

	ПолноеИмя = ТипМетаданных.ПолноеИмя();
	ПозицияРазделителя = СтрНайти(ПолноеИмя, ".");

	ПрефиксЗапроса = Лев(ПолноеИмя, ПозицияРазделителя - 1);
	ИмяОбъекта = СтрЗаменить(ПолноеИмя, ПрефиксЗапроса + ".", "");

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяОбъекта", ИмяОбъекта);
	СтруктураПараметров.Вставить("ПрефиксЗапроса", ПрефиксЗапроса);
	СтруктураПараметров.Вставить("ГруппаМетаданных", "");

	Для Каждого ЭлементГруппаМетаданных Из ГруппыМетаданных Цикл
		Если ЭлементГруппаМетаданных.ПрефиксЗапроса = ПрефиксЗапроса Тогда
			ГруппаМетаданных = ЭлементГруппаМетаданных.Имя;
			СтруктураПараметров.Вставить("ГруппаМетаданных", ГруппаМетаданных);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураПараметров;

КонецФункции

// Возвращает полный путь к указанной форме.
//
// Параметры:
//  ИмяФормы - Строка - Имя формы
//
// Возвращаемое значение:
//  Строка - Полный путь к форме.
//
Функция ПолныйПутьКФормеНаСервере(ИмяФормы) Экспорт

	Если Метаданные.Обработки.Найти("РедакторДанных") = Неопределено Тогда
		ПолныйПутьКФорме = "ВнешняяОбработка.РедакторДанных.Форма." + ИмяФормы;
	Иначе
		ПолныйПутьКФорме = "Обработка.РедакторДанных.Форма." + ИмяФормы;
	КонецЕсли;

	Возврат ПолныйПутьКФорме;

КонецФункции

// Представление типа реквизита.
//
// Параметры:
//  ОписаниеТипа - ОписаниеТипов - Описание типа реквизита
//  ЗначениеСвойства - Произвольный - Значение реквизита
//
// Возвращаемое значение:
//  Строка - Представление типа реквизита
//
Функция ПредставлениеТипаРеквизита(ОписаниеТипа, ЗначениеСвойства) Экспорт

	ПредставлениеТипа = "";

	Для Каждого ТекущийТип Из ОписаниеТипа.Типы() Цикл
		Если ТекущийТип = Тип("Строка") Тогда
			ШаблонТипа = "Строка (%1%2)";

			Если ОписаниеТипа.КвалификаторыСтроки.Длина = 0 Тогда
				ПредставлениеТекущегоТипа = СтрШаблон(
					// BSLLS:Typo-off
					ШаблонТипа, "Неогр", "");
					// BSLLS:Typo-on

			ИначеЕсли ОписаниеТипа.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная Тогда
				ПредставлениеТекущегоТипа = СтрШаблон(
					ШаблонТипа, "Ф", Формат(ОписаниеТипа.КвалификаторыСтроки.Длина, "ЧГ=0"));

			Иначе
				ПредставлениеТекущегоТипа = СтрШаблон(
					ШаблонТипа, "П", Формат(ОписаниеТипа.КвалификаторыСтроки.Длина, "ЧГ=0"));
			КонецЕсли;

		ИначеЕсли ТекущийТип = Тип("Число") Тогда
			ШаблонТипа = "Число (%1.%2%3)";

			Если ОписаниеТипа.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный Тогда
				// BSLLS:Typo-off
				ТекстНеотрицательное = " неотр";
				// BSLLS:Typo-on
			Иначе
				ТекстНеотрицательное = "";
			КонецЕсли;

			ПредставлениеТекущегоТипа = СтрШаблон(
				ШаблонТипа,
				ОписаниеТипа.КвалификаторыЧисла.Разрядность,
				ОписаниеТипа.КвалификаторыЧисла.РазрядностьДробнойЧасти,
				ТекстНеотрицательное);

		ИначеЕсли ТекущийТип = Тип("Дата") Тогда
			ПредставлениеТекущегоТипа = Строка(ОписаниеТипа.КвалификаторыДаты.ЧастиДаты);
			Если ПустаяСтрока(ПредставлениеТекущегоТипа) Тогда
				ПредставлениеТекущегоТипа = "Дата";
			КонецЕсли;

		ИначеЕсли ТекущийТип = Тип("ХранилищеЗначения") Тогда
			ПредставлениеТекущегоТипа = НСтр("ru = 'Хранилище значения'");

		Иначе
			ПрикладнойОбъектМетаданных = Метаданные.НайтиПоТипу(ТекущийТип);

			Если ПрикладнойОбъектМетаданных = Неопределено Тогда
				ПредставлениеТекущегоТипа = Строка(ТекущийТип);
			Иначе
				ПредставлениеТекущегоТипа = ПрикладнойОбъектМетаданных.ПолноеИмя();
			КонецЕсли;
		КонецЕсли;

		ПредставлениеТипа = ПредставлениеТипа + ?(ПредставлениеТипа = "", "", ", ") + ПредставлениеТекущегоТипа;
	КонецЦикла;

	Возврат ПредставлениеТипа;

КонецФункции

// Получить менеджер объекта.
//
// Параметры:
//  ГруппаМетаданных - Строка - Группа метаданных объекта.
//  ИмяОбъекта - Строка - Имя объекта метаданных.
//
// Возвращаемое значение:
//  - ПланыОбменаМенеджер - Менеджер объекта метаданных.
//  - КонстантыМенеджер - Менеджер объекта метаданных.
//  - СправочникиМенеджер - Менеджер объекта метаданных.
//  - ДокументыМенеджер - Менеджер объекта метаданных.
//  - ПланыВидовХарактеристикМенеджер - Менеджер объекта метаданных.
//  - ПланыСчетовМенеджер - Менеджер объекта метаданных.
//  - ПланыВидовРасчетаМенеджер - Менеджер объекта метаданных.
//  - РегистрыСведенийМенеджер - Менеджер объекта метаданных.
//  - РегистрыНакопленияМенеджер - Менеджер объекта метаданных.
//  - РегистрыБухгалтерииМенеджер - Менеджер объекта метаданных.
//  - РегистрыРасчетаМенеджер - Менеджер объекта метаданных.
//  - БизнесПроцессыМенеджер - Менеджер объекта метаданных.
//  - ЗадачиМенеджер - Менеджер объекта метаданных.
//
Функция ПолучитьМенеджерОбъекта(ГруппаМетаданных, ИмяОбъекта) Экспорт

	МенеджерОбъектов = Неопределено;

	ГруппыМетаданных = ГруппыМетаданных();

	Для Каждого ЭлементГруппаМетаданных Из ГруппыМетаданных Цикл
		Если ЭлементГруппаМетаданных.Имя = ГруппаМетаданных Тогда
			МенеджерОбъектов = ЭлементГруппаМетаданных.МенеджерОбъектов[ИмяОбъекта];
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат МенеджерОбъектов;

КонецФункции

// Записывает в журнал бизнес-статистики сведения о событии.
//
// Параметры:
//  ИмяОперации	- Строка	- имя операции статистики, в случае отсутствия создается новое.
//  Значение	- Число		- количественное значение операции статистики.
//  Комментарий	- Строка	- произвольный комментарий.
//
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение = 1, Комментарий = "") Экспорт

	// Проверим, есть ли подсистема мониторинга
	Если Метаданные.ОбщиеМодули.Найти("ЦентрМониторинга") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьБезопасныйРежим(Истина);
	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	МодульЦентрМониторинга = Вычислить("ЦентрМониторинга");

	ИмяОперации = "Инструменты.РедакторОбъектов." + ИмяОперации;
	МодульЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяОперации, Значение, Комментарий);

КонецПроцедуры

// Пиктограммы метаданных.
//
// Возвращаемое значение:
//  Структура - Пиктограммы метаданных:
// * ПланыОбмена - Число - индекс пиктограммы.
// * Константы - Число - индекс пиктограммы.
// * Справочники - Число - индекс пиктограммы.
// * Документы - Число - индекс пиктограммы.
// * ПланыВидовХарактеристик - Число - индекс пиктограммы.
// * ПланыСчетов - Число - индекс пиктограммы.
// * ПланыВидовРасчета - Число - индекс пиктограммы.
// * РегистрыСведений - Число - индекс пиктограммы.
// * РегистрыНакопления - Число - индекс пиктограммы.
// * РегистрыБухгалтерии - Число - индекс пиктограммы.
// * РегистрыРасчета - Число - индекс пиктограммы.
// * БизнесПроцессы - Число - индекс пиктограммы.
// * Задачи - Число - индекс пиктограммы.
// * СтандартныеРеквизиты - Число - индекс пиктограммы.
// * Реквизиты - Число - индекс пиктограммы.
// * Избранное - Число - индекс пиктограммы.
// * Измерения - Число - индекс пиктограммы.
// * Ресурсы - Число - индекс пиктограммы.
// * ПланОбмена - Число - индекс пиктограммы.
// * ОбщиеРеквизиты - Число - индекс пиктограммы.
//
Функция ПиктограммыМетаданных() Экспорт

	ПиктограммыМетаданных = Новый Структура();

	ИндексТекущейПиктограммы = 1;
	ПиктограммыМетаданных.Вставить("ПланыОбмена", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 2;
	ПиктограммыМетаданных.Вставить("Константы", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 3;
	ПиктограммыМетаданных.Вставить("Справочники", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 4;
	ПиктограммыМетаданных.Вставить("Документы", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 5;
	ПиктограммыМетаданных.Вставить("ПланыВидовХарактеристик", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 6;
	ПиктограммыМетаданных.Вставить("ПланыСчетов", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 7;
	ПиктограммыМетаданных.Вставить("ПланыВидовРасчета", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 8;
	ПиктограммыМетаданных.Вставить("РегистрыСведений", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 9;
	ПиктограммыМетаданных.Вставить("РегистрыНакопления", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 10;
	ПиктограммыМетаданных.Вставить("РегистрыБухгалтерии", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 11;
	ПиктограммыМетаданных.Вставить("РегистрыРасчета", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 12;
	ПиктограммыМетаданных.Вставить("БизнесПроцессы", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 13;
	ПиктограммыМетаданных.Вставить("Задачи", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 14;
	ПиктограммыМетаданных.Вставить("СтандартныеРеквизиты", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 15;
	ПиктограммыМетаданных.Вставить("Реквизиты", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 16;
	ПиктограммыМетаданных.Вставить("Избранное", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 17;
	ПиктограммыМетаданных.Вставить("Измерения", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 18;
	ПиктограммыМетаданных.Вставить("Ресурсы", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 19;
	ПиктограммыМетаданных.Вставить("ПланОбмена", ИндексТекущейПиктограммы);

	ИндексТекущейПиктограммы = 20;
	ПиктограммыМетаданных.Вставить("ОбщиеРеквизиты", ИндексТекущейПиктограммы);

	Возврат ПиктограммыМетаданных;

КонецФункции

#КонецОбласти

#КонецЕсли